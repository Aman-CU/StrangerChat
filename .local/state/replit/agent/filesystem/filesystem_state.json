{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Stranger Chat\n\n## Overview\n\nStranger Chat is an anonymous chat application similar to Omegle that allows users to connect randomly with other online users for real-time text and video conversations. The application is built as a full-stack solution using React for the frontend and Express with WebSocket support for the backend. Users can start chatting without any sign-up process, making it truly anonymous. The system includes essential moderation features like user reporting and comprehensive audit logging for safety and compliance.\n\n## Recent Changes (August 14, 2025)\n\n- Added WebRTC support for random video chat functionality\n- Implemented peer-to-peer video calling with audio/video controls\n- Created dedicated video chat interface with picture-in-picture local video\n- Added WebRTC signaling through WebSocket server\n- Updated landing page with separate \"Start Text Chat\" and \"Start Video Chat\" buttons\n- Enhanced audit logging to track video chat sessions and WebRTC signaling\n- Implemented media state management for video/audio toggle functionality\n- **Fixed NAT traversal issues for long-distance video chat connections**:\n  - Added multiple STUN servers (Google, Mozilla, VoIP providers) for better connectivity\n  - Integrated free TURN servers (OpenRelay) for relay when direct connection fails\n  - Optimized ICE configuration with larger candidate pool and better transport policies\n  - Added automatic connection retry mechanism with ICE restart capability\n  - Implemented comprehensive connection state logging for debugging\n  - Enhanced media constraints for better codec negotiation and bandwidth efficiency\n- **Fixed video streaming connectivity and \"Next\" button behavior (August 14, 2025)**:\n  - Improved WebRTC initialization timing with better peer connection setup\n  - Enhanced \"Next\" button to properly handle waiting users in queue\n  - Fixed issue where waiting users got errors when clicking \"Next\" - now they stay in queue\n  - Added smart matching logic to avoid immediate re-pairing when other users are available\n  - Improved video connection state management and error handling\n  - Added comprehensive logging for debugging video pairing and WebRTC signaling\n  - **Removed mirror image effect from local video for natural appearance**\n  - **Added remote audio mute button to control other person's voice independently**\n  - **Fixed auto-start video functionality (August 14, 2025)**:\n    - Removed extra \"Start Video\" button - video now auto-starts when paired\n    - Improved mobile device camera support with mobile-first media constraints\n    - Enhanced WebRTC initialization timing with better ICE gathering wait\n    - Added fallback permission handling for mobile browsers\n    - Optimized media constraints specifically for mobile device compatibility\n- **Fixed text chat overflow and layout issues (August 14, 2025)**:\n  - Implemented WhatsApp-style internal scrolling for chat messages\n  - Fixed video canvas overflow when two peers connect by adding overflow:hidden constraints\n  - Added auto-scroll to bottom for new messages with smooth behavior\n  - Set max-height (600px) constraints to prevent upward chat overflow\n  - Maintained responsive layout while preventing layout shifts from message overflow\n- **Enhanced mobile and tablet responsiveness (August 18, 2025)**:\n  - Added responsive design that hides text chat sidebar on mobile and tablet views\n  - Implemented icon-only media control buttons for mobile/tablet to prevent overflow\n  - Created animated mobile chat overlay that slides from bottom (45% screen height)\n  - Added backdrop click-to-close functionality for mobile chat overlay\n  - Integrated chat toggle button with media controls for seamless mobile experience\n  - Maintained all chat functionality in mobile overlay including Next button and message history\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built using React with TypeScript and follows a component-based architecture. It uses Vite as the build tool and development server, providing fast hot module replacement. The UI is constructed with shadcn/ui components built on top of Radix UI primitives, ensuring accessibility and consistent design patterns. Styling is handled through Tailwind CSS with custom CSS variables for theming.\n\nKey architectural decisions:\n- **Wouter for routing**: Lightweight client-side routing solution chosen over React Router for minimal bundle size\n- **TanStack Query**: Handles server state management and API interactions with built-in caching and error handling\n- **Custom WebSocket hook**: Encapsulates all real-time communication logic in a reusable hook pattern\n- **Component separation**: Clear separation between landing page and chat interface components for better maintainability\n\n### Backend Architecture\nThe server uses Express.js with WebSocket support via the 'ws' library for real-time bidirectional communication. The architecture follows a modular pattern with separated concerns for routing, storage, and WebSocket handling.\n\nKey architectural decisions:\n- **Single server approach**: Both HTTP API and WebSocket connections are handled by the same Express server to simplify deployment in Replit\n- **In-memory storage for MVP**: Uses a custom storage abstraction with in-memory implementation for rapid development, designed to be easily replaceable with persistent storage\n- **Queue-based matchmaking**: Simple first-in-first-out queue system for pairing users randomly\n- **Heartbeat mechanism**: Implements WebSocket ping/pong to detect and clean up broken connections\n\n### Data Storage Solutions\nCurrently implements an in-memory storage system with a well-defined interface that can be easily swapped for persistent solutions like PostgreSQL with Drizzle ORM (configuration already present).\n\nStorage components:\n- **Audit logs**: Comprehensive logging of all user actions including connections, disconnections, messages, and reports\n- **User queue management**: Temporary storage of users waiting to be matched\n- **Chat room tracking**: Active chat sessions and user-to-room mappings\n- **Connection monitoring**: WebSocket connection states and cleanup mechanisms\n\n### Real-time Communication\nWebSocket implementation provides instant messaging capabilities with automatic connection management and error recovery. Now enhanced with WebRTC support for video chat functionality.\n\nFeatures:\n- **Automatic reconnection**: Client automatically attempts to reconnect on connection loss\n- **Message queuing**: Ensures message delivery reliability during brief connection issues\n- **Connection state management**: Clear state transitions between connecting, waiting, paired, video_waiting, video_paired, and disconnected states\n- **Partner notification**: Immediate notification when chat partner disconnects\n- **WebRTC signaling**: Peer-to-peer video calling with offer/answer/ICE candidate exchange\n- **Media controls**: Real-time video and audio toggle functionality with state synchronization\n- **Dual chat modes**: Seamless switching between text-only and video chat experiences\n\n### Security and Moderation\nBuilt-in safety features for content moderation and user protection.\n\nImplementation:\n- **Report functionality**: Users can flag inappropriate behavior with full audit trail\n- **Audit logging**: Complete tracking of all user interactions for moderation review\n- **IP and User-Agent tracking**: Basic metadata collection for abuse investigation\n- **Automatic cleanup**: Broken connections are detected and cleaned up to prevent resource leaks\n\n## External Dependencies\n\n### Frontend Dependencies\n- **React**: Core framework for building the user interface\n- **Vite**: Build tool and development server with fast HMR\n- **shadcn/ui + Radix UI**: Component library providing accessible, customizable UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **TanStack Query**: Server state management and data fetching\n- **Wouter**: Lightweight client-side routing\n- **Lucide React**: Icon library for consistent iconography\n\n### Backend Dependencies\n- **Express.js**: Web application framework for Node.js\n- **ws**: WebSocket library for real-time communication\n- **Drizzle ORM**: SQL ORM with TypeScript support (configured but not actively used in MVP)\n- **@neondatabase/serverless**: PostgreSQL driver for serverless environments\n- **connect-pg-simple**: PostgreSQL session store (configured for future use)\n\n### Development and Build Tools\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TSX**: TypeScript execution environment for development\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Third-party Services\n- **Neon Database**: Serverless PostgreSQL database (configured via environment variables)\n- **Replit**: Hosting platform with built-in development environment support\n- **WebSocket Protocol**: Standard protocol for real-time bidirectional communication\n\nThe application is designed to run entirely within the Replit environment, with all external dependencies being npm packages or standard web protocols. The database configuration is present but the MVP uses in-memory storage for immediate functionality.","size_bytes":9334},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport type { SocketUser, ChatMessage, WebRTCSignal } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\ninterface ExtendedWebSocket extends WebSocket {\n  socketId?: string;\n  isAlive?: boolean;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API route to get audit logs\n  app.get(\"/api/audit-logs\", async (req, res) => {\n    try {\n      const logs = await storage.getAuditLogs(50);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for chat functionality\n  const wss = new WebSocketServer({ \n    server: httpServer, \n    path: '/ws',\n    clientTracking: true \n  });\n\n  // Heartbeat to detect broken connections\n  const heartbeat = function(this: ExtendedWebSocket) {\n    this.isAlive = true;\n  };\n\n  wss.on('connection', function connection(ws: ExtendedWebSocket, req) {\n    const socketId = randomUUID();\n    ws.socketId = socketId;\n    ws.isAlive = true;\n    \n    const userAgent = req.headers['user-agent'] || '';\n    const ipAddress = req.socket.remoteAddress || req.headers['x-forwarded-for'] as string || '';\n\n    ws.on('pong', heartbeat);\n\n    console.log(`[CONNECT] New user connected: ${socketId}`);\n\n    // Send initial connection confirmation\n    ws.send(JSON.stringify({\n      type: 'connected',\n      socketId: socketId\n    }));\n\n    ws.on('message', async function message(data) {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        switch (message.type) {\n          case 'join_queue':\n            await handleJoinQueue(ws, socketId, ipAddress, userAgent);\n            break;\n            \n          case 'send_message':\n            await handleSendMessage(ws, socketId, message.content);\n            break;\n            \n          case 'next_user':\n            await handleNextUser(ws, socketId, ipAddress, userAgent, message.videoMode);\n            break;\n            \n          case 'report_user':\n            await handleReportUser(ws, socketId, ipAddress, userAgent);\n            break;\n\n          case 'start_video':\n            await handleStartVideo(ws, socketId, ipAddress, userAgent);\n            break;\n            \n          case 'webrtc_signal':\n            await handleWebRTCSignal(ws, socketId, message.signal);\n            break;\n            \n          default:\n            console.log(`[UNKNOWN] Unknown message type: ${message.type}`);\n        }\n      } catch (error) {\n        console.error(`[ERROR] Failed to process message from ${socketId}:`, error);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Failed to process message'\n        }));\n      }\n    });\n\n    ws.on('close', async function close() {\n      await handleDisconnect(socketId, ipAddress, userAgent);\n    });\n\n    ws.on('error', function error(err) {\n      console.error(`[ERROR] WebSocket error for ${socketId}:`, err);\n    });\n  });\n\n  // Heartbeat interval to detect broken connections\n  const interval = setInterval(function ping() {\n    wss.clients.forEach(function each(ws: ExtendedWebSocket) {\n      if (ws.isAlive === false) {\n        return ws.terminate();\n      }\n      \n      ws.isAlive = false;\n      ws.ping();\n    });\n  }, 30000);\n\n  wss.on('close', function close() {\n    clearInterval(interval);\n  });\n\n  // Handle joining the waiting queue\n  async function handleJoinQueue(ws: ExtendedWebSocket, socketId: string, ipAddress: string, userAgent: string) {\n    const user: SocketUser = {\n      socketId,\n      joinedAt: new Date().toISOString(),\n      ipAddress,\n      userAgent\n    };\n\n    // Remove from any existing room first\n    storage.removeUserFromRoom(socketId);\n\n    // Add to waiting queue\n    storage.addUserToQueue(user);\n\n    // Log the queue join\n    await storage.createAuditLog({\n      socketId,\n      action: 'join_queue',\n      ipAddress,\n      userAgent,\n      details: 'User joined waiting queue'\n    });\n\n    // Try to find a match using the helper function\n    await tryMatchTextUsersWithPreference();\n    \n    // Check if user got matched, if not notify they're waiting\n    const userRoom = storage.getRoomByUser(socketId);\n    if (!userRoom) {\n      // Notify user they're waiting\n      ws.send(JSON.stringify({\n        type: 'waiting',\n        message: 'Looking for someone to chat with...'\n      }));\n    }\n  }\n\n  // Handle sending messages\n  async function handleSendMessage(ws: ExtendedWebSocket, socketId: string, content: string) {\n    const room = storage.getRoomByUser(socketId);\n    if (!room) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'You are not in a chat room'\n      }));\n      return;\n    }\n\n    // Find partner's socket\n    const partnerId = room.users.find(id => id !== socketId);\n    if (!partnerId) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'No partner found'\n      }));\n      return;\n    }\n\n    const partnerWs = findWebSocketBySocketId(partnerId);\n    if (!partnerWs || partnerWs.readyState !== WebSocket.OPEN) {\n      ws.send(JSON.stringify({\n        type: 'partner_disconnected',\n        message: 'Your partner has disconnected'\n      }));\n      storage.removeUserFromRoom(socketId);\n      return;\n    }\n\n    const messageData: ChatMessage = {\n      id: randomUUID(),\n      content: content.substring(0, 1000), // Limit message length\n      timestamp: new Date().toISOString(),\n      isOwn: false\n    };\n\n    // Send to partner\n    partnerWs.send(JSON.stringify({\n      type: 'message',\n      message: messageData\n    }));\n\n    // Send confirmation to sender\n    ws.send(JSON.stringify({\n      type: 'message_sent',\n      message: { ...messageData, isOwn: true }\n    }));\n\n    // Log the message (without content for privacy)\n    await storage.createAuditLog({\n      socketId,\n      partnerSocketId: partnerId,\n      action: 'message',\n      details: 'Message sent'\n    });\n  }\n\n  // Handle next user request  \n  async function handleNextUser(ws: ExtendedWebSocket, socketId: string, ipAddress: string, userAgent: string, videoMode?: boolean) {\n    const room = storage.getRoomByUser(socketId);\n    \n    // If user is not in a room, they might be waiting in queue\n    if (!room) {\n      // Check if user is in waiting queues\n      const isInTextQueue = storage.getWaitingUsers().some(user => user.socketId === socketId);\n      const isInVideoQueue = storage.getWaitingVideoUsers().some(user => user.socketId === socketId);\n      \n      if (isInTextQueue || isInVideoQueue) {\n        // User is waiting in queue - just notify them they're still waiting\n        if (videoMode || isInVideoQueue) {\n          ws.send(JSON.stringify({\n            type: 'video_waiting',\n            message: 'Still looking for someone to video chat with...'\n          }));\n        } else {\n          ws.send(JSON.stringify({\n            type: 'waiting',\n            message: 'Still looking for someone to chat with...'\n          }));\n        }\n        return;\n      }\n      \n      // User is not in queue or room - put them back in appropriate queue\n      if (videoMode) {\n        await handleStartVideo(ws, socketId, ipAddress, userAgent);\n      } else {\n        await handleJoinQueue(ws, socketId, ipAddress, userAgent);\n      }\n      return;\n    }\n    \n    let wasVideoCall = room.isVideoCall || false;\n    \n    // Use explicit videoMode if provided, otherwise fall back to room context\n    if (videoMode !== undefined) {\n      wasVideoCall = videoMode;\n    }\n    \n    // Find partner\n    const partnerId = room.users.find(id => id !== socketId);\n    \n    // Log the next user action\n    await storage.createAuditLog({\n      socketId,\n      partnerSocketId: partnerId,\n      action: 'next_user',\n      ipAddress,\n      userAgent,\n      details: 'User clicked next to find new partner'\n    });\n\n    // Clean up WebRTC state for video calls\n    if (wasVideoCall && partnerId) {\n      storage.clearWebRTCState(room.id);\n    }\n\n    // Remove both users from the current room\n    storage.removeUserFromRoom(socketId);\n    if (partnerId) {\n      storage.removeUserFromRoom(partnerId);\n    }\n\n    // Add both users back to the appropriate queue\n    if (partnerId) {\n      const partnerWs = findWebSocketBySocketId(partnerId);\n      \n      // Create user objects for both users\n      const currentUser: SocketUser = {\n        socketId,\n        joinedAt: new Date().toISOString(),\n        ipAddress,\n        userAgent\n      };\n\n      const partnerUser: SocketUser = {\n        socketId: partnerId,\n        joinedAt: new Date().toISOString(),\n        ipAddress: '', // We don't have partner's IP, but it's not critical\n        userAgent: '' // We don't have partner's user agent, but it's not critical\n      };\n\n      // Add both users to the appropriate queue based on chat type\n      if (wasVideoCall) {\n        storage.addUserToVideoQueue(currentUser);\n        storage.addUserToVideoQueue(partnerUser);\n        \n        // Notify both users they're back in video queue\n        ws.send(JSON.stringify({\n          type: 'video_waiting',\n          message: 'Looking for someone new to video chat with...'\n        }));\n        \n        if (partnerWs && partnerWs.readyState === WebSocket.OPEN) {\n          partnerWs.send(JSON.stringify({\n            type: 'video_waiting',\n            message: 'Looking for someone new to video chat with...'\n          }));\n        }\n\n        // Add a delay before trying to match to prevent immediate re-pairing\n        setTimeout(async () => {\n          await tryMatchVideoUsersWithPreference([socketId, partnerId]);\n        }, 1000); // 1 second delay\n      } else {\n        storage.addUserToQueue(currentUser);\n        storage.addUserToQueue(partnerUser);\n        \n        // Notify both users they're back in text queue\n        ws.send(JSON.stringify({\n          type: 'waiting',\n          message: 'Looking for someone new to chat with...'\n        }));\n        \n        if (partnerWs && partnerWs.readyState === WebSocket.OPEN) {\n          partnerWs.send(JSON.stringify({\n            type: 'waiting',\n            message: 'Looking for someone new to chat with...'\n          }));\n        }\n\n        // Add a delay before trying to match to prevent immediate re-pairing\n        setTimeout(async () => {\n          await tryMatchTextUsersWithPreference([socketId, partnerId]);\n        }, 1000); // 1 second delay\n      }\n    } else {\n      // No partner found, just add current user back to queue\n      if (wasVideoCall) {\n        await handleStartVideo(ws, socketId, ipAddress, userAgent);\n      } else {\n        await handleJoinQueue(ws, socketId, ipAddress, userAgent);\n      }\n    }\n  }\n\n  // Helper function to try matching text chat users\n  async function tryMatchTextUsers() {\n    return tryMatchTextUsersWithPreference();\n  }\n\n  // Helper function to try matching text chat users with preference to avoid recent pairings\n  async function tryMatchTextUsersWithPreference(avoidPairing: string[] = []) {\n    const waitingUsers = storage.getWaitingUsers();\n    if (waitingUsers.length >= 2) {\n      let user1: SocketUser;\n      let user2: SocketUser;\n      \n      // If we have more than 2 users and want to avoid specific pairing, try that first\n      if (waitingUsers.length > 2 && avoidPairing.length === 2) {\n        // Find users that are not in the avoid list\n        const availableUsers = waitingUsers.filter(user => !avoidPairing.includes(user.socketId));\n        \n        if (availableUsers.length >= 2) {\n          // Pair two users that weren't just paired together\n          user1 = availableUsers[0];\n          user2 = availableUsers[1];\n        } else if (availableUsers.length === 1) {\n          // Only one new user, pair with one from avoid list\n          user1 = availableUsers[0];\n          user2 = waitingUsers.find(user => avoidPairing.includes(user.socketId))!;\n        } else {\n          // All users are in avoid list, pair them anyway\n          user1 = waitingUsers[0];\n          user2 = waitingUsers[1];\n        }\n      } else {\n        // Standard pairing logic\n        user1 = waitingUsers[0];\n        user2 = waitingUsers[1];\n      }\n      \n      // Create room\n      const room = storage.createRoom(user1, user2);\n      \n      // Get WebSocket connections\n      const ws1 = findWebSocketBySocketId(user1.socketId);\n      const ws2 = findWebSocketBySocketId(user2.socketId);\n\n      if (ws1 && ws2) {\n        // Notify both users they've been paired\n        ws1.send(JSON.stringify({\n          type: 'paired',\n          roomId: room.id,\n          message: 'You have been connected to a stranger!'\n        }));\n\n        ws2.send(JSON.stringify({\n          type: 'paired',\n          roomId: room.id,\n          message: 'You have been connected to a stranger!'\n        }));\n\n        // Log the pairing\n        await storage.createAuditLog({\n          socketId: user1.socketId,\n          partnerSocketId: user2.socketId,\n          action: 'paired',\n          ipAddress: user1.ipAddress,\n          userAgent: user1.userAgent,\n          details: `Paired with ${user2.socketId}`\n        });\n\n        await storage.createAuditLog({\n          socketId: user2.socketId,\n          partnerSocketId: user1.socketId,\n          action: 'paired',\n          ipAddress: user2.ipAddress,\n          userAgent: user2.userAgent,\n          details: `Paired with ${user1.socketId}`\n        });\n\n        console.log(`[PAIRED] ${user1.socketId} and ${user2.socketId} in room ${room.id}`);\n      }\n    }\n  }\n\n  // Helper function to try matching video chat users\n  async function tryMatchVideoUsers() {\n    return tryMatchVideoUsersWithPreference();\n  }\n\n  // Helper function to try matching video chat users with preference to avoid recent pairings\n  async function tryMatchVideoUsersWithPreference(avoidPairing: string[] = []) {\n    const waitingUsers = storage.getWaitingVideoUsers();\n    if (waitingUsers.length >= 2) {\n      let user1: SocketUser;\n      let user2: SocketUser;\n      \n      // If we have more than 2 users and want to avoid specific pairing, try that first\n      if (waitingUsers.length > 2 && avoidPairing.length === 2) {\n        // Find users that are not in the avoid list\n        const availableUsers = waitingUsers.filter(user => !avoidPairing.includes(user.socketId));\n        \n        if (availableUsers.length >= 2) {\n          // Pair two users that weren't just paired together\n          user1 = availableUsers[0];\n          user2 = availableUsers[1];\n        } else if (availableUsers.length === 1) {\n          // Only one new user, pair with one from avoid list\n          user1 = availableUsers[0];\n          user2 = waitingUsers.find(user => avoidPairing.includes(user.socketId))!;\n        } else {\n          // All users are in avoid list, pair them anyway\n          user1 = waitingUsers[0];\n          user2 = waitingUsers[1];\n        }\n      } else {\n        // Standard pairing logic\n        user1 = waitingUsers[0];\n        user2 = waitingUsers[1];\n      }\n      \n      // Create video room\n      const room = storage.createRoom(user1, user2);\n      room.isVideoCall = true;\n      \n      // Get WebSocket connections\n      const ws1 = findWebSocketBySocketId(user1.socketId);\n      const ws2 = findWebSocketBySocketId(user2.socketId);\n\n      if (ws1 && ws2) {\n        // Notify both users they've been paired for video\n        console.log(`[VIDEO_MATCH] Sending video_paired to initiator ${user1.socketId}`);\n        ws1.send(JSON.stringify({\n          type: 'video_paired',\n          roomId: room.id,\n          isInitiator: true,\n          message: 'Connected for video chat! Preparing video...'\n        }));\n\n        console.log(`[VIDEO_MATCH] Sending video_paired to receiver ${user2.socketId}`);\n        ws2.send(JSON.stringify({\n          type: 'video_paired',\n          roomId: room.id,\n          isInitiator: false,\n          message: 'Connected for video chat! Preparing video...'\n        }));\n\n        // Log the video pairing\n        await storage.createAuditLog({\n          socketId: user1.socketId,\n          partnerSocketId: user2.socketId,\n          action: 'video_paired',\n          ipAddress: user1.ipAddress,\n          userAgent: user1.userAgent,\n          details: `Video paired with ${user2.socketId}`\n        });\n\n        await storage.createAuditLog({\n          socketId: user2.socketId,\n          partnerSocketId: user1.socketId,\n          action: 'video_paired',\n          ipAddress: user2.ipAddress,\n          userAgent: user2.userAgent,\n          details: `Video paired with ${user1.socketId}`\n        });\n\n        console.log(`[VIDEO PAIRED] ${user1.socketId} (initiator) and ${user2.socketId} (receiver) in room ${room.id}`);\n        \n        // Ensure both sockets are ready for WebRTC\n        setTimeout(() => {\n          console.log(`[VIDEO] Ready to start WebRTC signaling for room ${room.id}`);\n        }, 100);\n      } else {\n        console.log('[ERROR] One or both WebSocket connections not available for video pairing');\n      }\n    }\n  }\n\n  // Handle starting video chat\n  async function handleStartVideo(ws: ExtendedWebSocket, socketId: string, ipAddress: string, userAgent: string) {\n    const user: SocketUser = {\n      socketId,\n      joinedAt: new Date().toISOString(),\n      ipAddress,\n      userAgent\n    };\n\n    // Remove from any existing room first\n    storage.removeUserFromRoom(socketId);\n\n    // Add to video waiting queue\n    storage.addUserToVideoQueue(user);\n\n    // Log the video queue join\n    await storage.createAuditLog({\n      socketId,\n      action: 'join_video_queue',\n      ipAddress,\n      userAgent,\n      details: 'User joined video chat waiting queue'\n    });\n\n    // Try to find a match for video chat using the helper function\n    await tryMatchVideoUsersWithPreference();\n    \n    // Check if user got matched, if not notify they're waiting\n    const userRoom = storage.getRoomByUser(socketId);\n    if (!userRoom) {\n      // Notify user they're waiting for video chat\n      ws.send(JSON.stringify({\n        type: 'video_waiting',\n        message: 'Looking for someone to video chat with...'\n      }));\n    }\n  }\n\n  // Handle WebRTC signaling\n  async function handleWebRTCSignal(ws: ExtendedWebSocket, socketId: string, signal: WebRTCSignal) {\n    const room = storage.getRoomByUser(socketId);\n    if (!room || !room.isVideoCall) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Not in a video chat room'\n      }));\n      return;\n    }\n\n    // Find partner's socket\n    const partnerId = room.users.find(id => id !== socketId);\n    if (!partnerId) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'No video partner found'\n      }));\n      return;\n    }\n\n    const partnerWs = findWebSocketBySocketId(partnerId);\n    if (!partnerWs || partnerWs.readyState !== WebSocket.OPEN) {\n      ws.send(JSON.stringify({\n        type: 'partner_disconnected',\n        message: 'Your video partner has disconnected'\n      }));\n      storage.removeUserFromRoom(socketId);\n      return;\n    }\n\n    // Forward the WebRTC signal to partner\n    partnerWs.send(JSON.stringify({\n      type: 'webrtc_signal',\n      signal: {\n        ...signal,\n        from: socketId,\n        to: partnerId\n      }\n    }));\n\n    // Log WebRTC signaling (without sensitive data)\n    await storage.createAuditLog({\n      socketId,\n      partnerSocketId: partnerId,\n      action: 'webrtc_signal',\n      details: `WebRTC signal type: ${signal.type}`\n    });\n  }\n\n  // Handle user reports\n  async function handleReportUser(ws: ExtendedWebSocket, socketId: string, ipAddress: string, userAgent: string) {\n    const room = storage.getRoomByUser(socketId);\n    \n    if (!room) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'No active chat to report'\n      }));\n      return;\n    }\n\n    const partnerId = room.users.find(id => id !== socketId);\n    if (partnerId) {\n      // Log the report\n      await storage.createAuditLog({\n        socketId,\n        partnerSocketId: partnerId,\n        action: 'report',\n        ipAddress,\n        userAgent,\n        details: `User reported partner ${partnerId} for inappropriate behavior`\n      });\n\n      console.log(`[REPORT] User ${socketId} reported partner ${partnerId}`);\n    }\n\n    // Confirm report was submitted\n    ws.send(JSON.stringify({\n      type: 'report_submitted',\n      message: 'Report submitted successfully'\n    }));\n\n    // Disconnect from current partner after report\n    await handleNextUser(ws, socketId, ipAddress, userAgent);\n  }\n\n  // Handle disconnection\n  async function handleDisconnect(socketId: string, ipAddress: string, userAgent: string) {\n    console.log(`[DISCONNECT] User disconnected: ${socketId}`);\n    \n    const room = storage.getRoomByUser(socketId);\n    if (room) {\n      // Clean up WebRTC state for video calls\n      if (room.isVideoCall) {\n        storage.clearWebRTCState(room.id);\n      }\n      \n      // Find partner and notify them\n      const partnerId = room.users.find(id => id !== socketId);\n      if (partnerId) {\n        const partnerWs = findWebSocketBySocketId(partnerId);\n        if (partnerWs && partnerWs.readyState === WebSocket.OPEN) {\n          if (room.isVideoCall) {\n            partnerWs.send(JSON.stringify({\n              type: 'partner_disconnected',\n              message: 'Your video partner has disconnected'\n            }));\n          } else {\n            partnerWs.send(JSON.stringify({\n              type: 'partner_disconnected',\n              message: 'Your partner has disconnected'\n            }));\n          }\n          \n          // Add partner back to appropriate queue\n          const partnerUser: SocketUser = {\n            socketId: partnerId,\n            joinedAt: new Date().toISOString(),\n            ipAddress: '',\n            userAgent: ''\n          };\n          \n          if (room.isVideoCall) {\n            storage.addUserToVideoQueue(partnerUser);\n            partnerWs.send(JSON.stringify({\n              type: 'video_waiting',\n              message: 'Looking for someone to video chat with...'\n            }));\n            // Try to match with others\n            setTimeout(async () => {\n              await tryMatchVideoUsersWithPreference();\n            }, 500);\n          } else {\n            storage.addUserToQueue(partnerUser);\n            partnerWs.send(JSON.stringify({\n              type: 'waiting',\n              message: 'Looking for someone to chat with...'\n            }));\n            // Try to match with others\n            setTimeout(async () => {\n              await tryMatchTextUsersWithPreference();\n            }, 500);\n          }\n        }\n\n        // Log the disconnect\n        await storage.createAuditLog({\n          socketId,\n          partnerSocketId: partnerId,\n          action: 'disconnect',\n          ipAddress,\n          userAgent,\n          details: 'User disconnected from chat'\n        });\n      }\n    }\n\n    // Clean up user data\n    storage.removeUserFromRoom(socketId); // This also removes from both queues\n  }\n\n  // Helper function to find WebSocket by socket ID\n  function findWebSocketBySocketId(socketId: string): ExtendedWebSocket | null {\n    const clientsArray = Array.from(wss.clients);\n    for (const client of clientsArray) {\n      const extendedClient = client as ExtendedWebSocket;\n      if (extendedClient.socketId === socketId && extendedClient.readyState === WebSocket.OPEN) {\n        return extendedClient;\n      }\n    }\n    return null;\n  }\n\n  return httpServer;\n}\n","size_bytes":23632},"server/storage.ts":{"content":"import { type AuditLog, type InsertAuditLog, type SocketUser, type ChatRoom } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Audit log operations\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n  \n  // Chat queue and room management\n  addUserToQueue(user: SocketUser): void;\n  removeUserFromQueue(socketId: string): void;\n  getWaitingUsers(): SocketUser[];\n  addUserToVideoQueue(user: SocketUser): void;\n  removeUserFromVideoQueue(socketId: string): void;\n  getWaitingVideoUsers(): SocketUser[];\n  createRoom(user1: SocketUser, user2: SocketUser): ChatRoom;\n  getRoomByUser(socketId: string): ChatRoom | undefined;\n  removeRoom(roomId: string): void;\n  removeUserFromRoom(socketId: string): void;\n  \n  // WebRTC state management\n  clearWebRTCState(roomId: string): void;\n}\n\nexport class MemStorage implements IStorage {\n  private auditLogs: Map<string, AuditLog>;\n  private waitingQueue: SocketUser[];\n  private videoWaitingQueue: SocketUser[];\n  private chatRooms: Map<string, ChatRoom>;\n  private userRoomMap: Map<string, string>; // socketId -> roomId\n  private webrtcState: Map<string, any>; // roomId -> WebRTC state\n\n  constructor() {\n    this.auditLogs = new Map();\n    this.waitingQueue = [];\n    this.videoWaitingQueue = [];\n    this.chatRooms = new Map();\n    this.userRoomMap = new Map();\n    this.webrtcState = new Map();\n  }\n\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = {\n      ...insertLog,\n      id,\n      timestamp: new Date(),\n      details: insertLog.details ?? null,\n      partnerSocketId: insertLog.partnerSocketId ?? null,\n      ipAddress: insertLog.ipAddress ?? null,\n      userAgent: insertLog.userAgent ?? null,\n    };\n    this.auditLogs.set(id, log);\n    \n    // Log to console for MVP compliance tracking\n    console.log(`[AUDIT] ${log.action.toUpperCase()} - Socket: ${log.socketId}${log.partnerSocketId ? `, Partner: ${log.partnerSocketId}` : ''} - ${log.timestamp.toISOString()}`);\n    if (log.details) {\n      console.log(`[AUDIT] Details: ${log.details}`);\n    }\n    \n    return log;\n  }\n\n  async getAuditLogs(limit = 100): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values())\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  addUserToQueue(user: SocketUser): void {\n    // Remove if already in queue\n    this.removeUserFromQueue(user.socketId);\n    this.waitingQueue.push(user);\n  }\n\n  removeUserFromQueue(socketId: string): void {\n    this.waitingQueue = this.waitingQueue.filter(user => user.socketId !== socketId);\n  }\n\n  getWaitingUsers(): SocketUser[] {\n    return [...this.waitingQueue];\n  }\n\n  addUserToVideoQueue(user: SocketUser): void {\n    // Remove if already in queue\n    this.removeUserFromVideoQueue(user.socketId);\n    this.videoWaitingQueue.push(user);\n  }\n\n  removeUserFromVideoQueue(socketId: string): void {\n    this.videoWaitingQueue = this.videoWaitingQueue.filter(user => user.socketId !== socketId);\n  }\n\n  getWaitingVideoUsers(): SocketUser[] {\n    return [...this.videoWaitingQueue];\n  }\n\n  createRoom(user1: SocketUser, user2: SocketUser): ChatRoom {\n    const roomId = randomUUID();\n    const room: ChatRoom = {\n      id: roomId,\n      users: [user1.socketId, user2.socketId],\n      createdAt: new Date().toISOString(),\n    };\n    \n    this.chatRooms.set(roomId, room);\n    this.userRoomMap.set(user1.socketId, roomId);\n    this.userRoomMap.set(user2.socketId, roomId);\n    \n    // Remove both users from waiting queue and video queue\n    this.removeUserFromQueue(user1.socketId);\n    this.removeUserFromQueue(user2.socketId);\n    this.removeUserFromVideoQueue(user1.socketId);\n    this.removeUserFromVideoQueue(user2.socketId);\n    \n    return room;\n  }\n\n  getRoomByUser(socketId: string): ChatRoom | undefined {\n    const roomId = this.userRoomMap.get(socketId);\n    return roomId ? this.chatRooms.get(roomId) : undefined;\n  }\n\n  removeRoom(roomId: string): void {\n    const room = this.chatRooms.get(roomId);\n    if (room) {\n      // Remove user mappings\n      room.users.forEach(socketId => {\n        this.userRoomMap.delete(socketId);\n      });\n      this.chatRooms.delete(roomId);\n      \n      // Clean up WebRTC state\n      this.clearWebRTCState(roomId);\n    }\n  }\n\n  removeUserFromRoom(socketId: string): void {\n    const roomId = this.userRoomMap.get(socketId);\n    if (roomId) {\n      const room = this.chatRooms.get(roomId);\n      if (room) {\n        // Remove the entire room when one user leaves\n        this.removeRoom(roomId);\n      }\n    }\n    \n    // Also remove from both queues\n    this.removeUserFromQueue(socketId);\n    this.removeUserFromVideoQueue(socketId);\n  }\n\n  clearWebRTCState(roomId: string): void {\n    // Remove any WebRTC signaling state for this room\n    this.webrtcState.delete(roomId);\n    console.log(`[CLEANUP] WebRTC state cleared for room ${roomId}`);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5059},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  socketId: text(\"socket_id\").notNull(),\n  partnerSocketId: text(\"partner_socket_id\"),\n  action: text(\"action\").notNull(), // 'report', 'connect', 'disconnect', 'message'\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n  details: text(\"details\"), // Additional context like message content for reports\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n\n// Chat-related types for Socket.IO communication\nexport interface ChatMessage {\n  id: string;\n  content: string;\n  timestamp: string;\n  isOwn: boolean;\n}\n\nexport interface SocketUser {\n  socketId: string;\n  joinedAt: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface ChatRoom {\n  id: string;\n  users: [string, string]; // Two socket IDs\n  createdAt: string;\n  isVideoCall?: boolean;\n}\n\n// WebRTC signaling types\nexport interface WebRTCSignal {\n  type: 'offer' | 'answer' | 'ice-candidate' | 'toggle-video' | 'toggle-audio';\n  data: any;\n  from: string;\n  to: string;\n}\n\nexport interface MediaState {\n  video: boolean;\n  audio: boolean;\n}\n","size_bytes":1576},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Chat from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Chat} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Send, SkipForward, Flag, Users } from \"lucide-react\";\nimport type { ChatMessage } from '@shared/schema';\n\ninterface ChatInterfaceProps {\n  messages: ChatMessage[];\n  onSendMessage: (content: string) => void;\n  onNextUser: () => void;\n  onReportUser: () => void;\n  statusMessage: string;\n  isWaiting: boolean;\n}\n\nexport function ChatInterface({ \n  messages, \n  onSendMessage, \n  onNextUser, \n  onReportUser, \n  statusMessage,\n  isWaiting\n}: ChatInterfaceProps) {\n  const [inputValue, setInputValue] = useState('');\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight;\n      }\n    }\n  }, [messages]);\n\n  // Focus input when not waiting\n  useEffect(() => {\n    if (!isWaiting && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isWaiting]);\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() && !isWaiting) {\n      onSendMessage(inputValue);\n      setInputValue('');\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white p-2 md:p-4\">\n      <div className=\"w-full max-w-4xl mx-auto h-[calc(100vh-1rem)] md:h-[calc(100vh-2rem)] flex flex-col\">\n        \n        {/* Header */}\n        <Card className=\"bg-gray-800 border-gray-700 mb-2 md:mb-4\">\n          <CardHeader className=\"pb-2 md:pb-3 px-3 md:px-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-4 w-4 md:h-5 md:w-5 text-blue-400\" />\n                <h2 className=\"text-base md:text-lg font-semibold text-white\" data-testid=\"title-chat\">\n                  Text Chat\n                </h2>\n                {!isWaiting && (\n                  <span className=\"text-xs bg-green-600 px-2 py-1 rounded-full\">\n                    Connected\n                  </span>\n                )}\n                {isWaiting && (\n                  <span className=\"text-xs bg-yellow-600 px-2 py-1 rounded-full animate-pulse\">\n                    Waiting\n                  </span>\n                )}\n              </div>\n              <div className=\"flex items-center space-x-1 md:space-x-2\">\n                <Button\n                  onClick={onNextUser}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center space-x-1 bg-gray-700 border-gray-600 hover:bg-gray-600 text-xs md:text-sm\"\n                  data-testid=\"button-next\"\n              >\n                <SkipForward className=\"h-3 w-3 md:h-4 md:w-4\" />\n                <span>Next</span>\n              </Button>\n              <Button\n                onClick={onReportUser}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center space-x-1 text-red-400 border-red-600 hover:bg-red-900/20 text-xs md:text-sm\"\n                disabled={isWaiting}\n                data-testid=\"button-report\"\n              >\n                <Flag className=\"h-3 w-3 md:h-4 md:w-4\" />\n                <span className=\"hidden sm:inline\">Report</span>\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 flex flex-col p-0\">\n          {/* Status message */}\n          {statusMessage && (\n            <div className=\"p-2 md:p-3 bg-blue-900/50 border-b border-blue-700\">\n              <p className=\"text-xs md:text-sm text-blue-200 text-center\" data-testid=\"text-chat-status\">\n                {statusMessage}\n              </p>\n            </div>\n          )}\n\n          {/* Messages area */}\n          <ScrollArea className=\"flex-1 p-3 md:p-4\" ref={scrollAreaRef} data-testid=\"area-messages\">\n            <div className=\"space-y-3 md:space-y-4\">\n              {messages.length === 0 && !isWaiting ? (\n                <div className=\"text-center text-gray-400 mt-8\">\n                  <p className=\"text-sm md:text-base\">Start a conversation with your new chat partner!</p>\n                </div>\n              ) : (\n                messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.isOwn ? 'justify-end' : 'justify-start'}`}\n                    data-testid={`message-${message.id}`}\n                  >\n                    <div\n                      className={`max-w-xs lg:max-w-md px-3 md:px-4 py-2 rounded-lg text-sm ${\n                        message.isOwn\n                          ? 'bg-blue-600 text-white'\n                          : 'bg-gray-700 border border-gray-600 text-gray-100'\n                      }`}\n                    >\n                      <p className=\"break-words\">{message.content}</p>\n                      <p\n                        className={`text-xs mt-1 ${\n                          message.isOwn ? 'text-blue-100' : 'text-gray-300'\n                        }`}\n                      >\n                        {new Date(message.timestamp).toLocaleTimeString([], {\n                          hour: '2-digit',\n                          minute: '2-digit'\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Input area */}\n          <div className=\"border-t border-gray-700 bg-gray-800 p-3 md:p-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                ref={inputRef}\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder={isWaiting ? \"Waiting for partner...\" : \"Type your message...\"}\n                disabled={isWaiting}\n                className=\"flex-1 bg-gray-700 border-gray-600 text-white placeholder-gray-400\"\n                maxLength={1000}\n                data-testid=\"input-message\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!inputValue.trim() || isWaiting}\n                size=\"icon\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"button-send\"\n              >\n                <Send className=\"h-3 w-3 md:h-4 md:w-4\" />\n              </Button>\n            </div>\n            <div className=\"flex justify-between items-center mt-2 text-xs text-gray-400\">\n              <span>Press Enter to send</span>\n              <span>{inputValue.length}/1000</span>\n            </div>\n          </div>\n        </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7294},"client/src/components/LandingPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MessageSquare, Video } from \"lucide-react\";\n\ninterface LandingPageProps {\n  onStartChat: () => void;\n  onStartVideo: () => void;\n  statusMessage: string;\n  isConnecting: boolean;\n}\n\nexport function LandingPage({ onStartChat, onStartVideo, statusMessage, isConnecting }: LandingPageProps) {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto shadow-lg\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-2\" data-testid=\"title-stranger-chat\">\n              Stranger Chat\n            </h1>\n            <p className=\"text-gray-600 leading-relaxed\" data-testid=\"text-description\">\n              Chat with a random stranger instantly — no sign up required.\n            </p>\n          </div>\n\n          <div className=\"mb-6 space-y-3\">\n            <Button\n              onClick={onStartChat}\n              disabled={isConnecting}\n              size=\"lg\"\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center space-x-2\"\n              data-testid=\"button-start-chat\"\n            >\n              <MessageSquare className=\"h-5 w-5\" />\n              <span>{isConnecting ? 'Connecting...' : 'Start Text Chat'}</span>\n            </Button>\n            \n            <Button\n              onClick={onStartVideo}\n              disabled={isConnecting}\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"w-full border-2 border-purple-600 text-purple-600 hover:bg-purple-600 hover:text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center space-x-2\"\n              data-testid=\"button-start-video\"\n            >\n              <Video className=\"h-5 w-5\" />\n              <span>{isConnecting ? 'Connecting...' : 'Start Video Chat'}</span>\n            </Button>\n          </div>\n\n          {statusMessage && (\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-sm text-blue-800\" data-testid=\"text-status\">\n                {statusMessage}\n              </p>\n            </div>\n          )}\n\n          <div className=\"mt-8 text-xs text-gray-500\">\n            <p>Please be respectful and follow community guidelines.</p>\n            <p className=\"mt-1\">Report inappropriate behavior using the report button.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2730},"client/src/components/VideoChat.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Video, \n  VideoOff, \n  Mic, \n  MicOff, \n  SkipForward, \n  Flag, \n  Users,\n  Send,\n  MessageSquare,\n  Home,\n  Moon,\n  Sun,\n  SplitSquareHorizontal,\n  Square,\n  Wifi,\n  WifiOff,\n  X\n} from \"lucide-react\";\nimport { useWebRTC } from '@/hooks/useWebRTC';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport type { ChatMessage, WebRTCSignal } from '@shared/schema';\n\ninterface VideoChatProps {\n  messages: ChatMessage[];\n  onSendMessage: (content: string) => void;\n  onNextUser: () => void;\n  onReportUser: () => void;\n  onWebRTCSignal: (signal: WebRTCSignal) => void;\n  onGoHome?: () => void;\n  statusMessage: string;\n  isWaiting: boolean;\n  isInitiator: boolean;\n}\n\nexport function VideoChat({ \n  messages, \n  onSendMessage, \n  onNextUser, \n  onReportUser, \n  onWebRTCSignal,\n  onGoHome,\n  statusMessage,\n  isWaiting,\n  isInitiator\n}: VideoChatProps) {\n  const [inputValue, setInputValue] = useState('');\n  const [showChat, setShowChat] = useState(true);\n  const [mediaError, setMediaError] = useState<string>('');\n  const [isRemoteMuted, setIsRemoteMuted] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [videoLayout, setVideoLayout] = useState<'horizontal' | 'original'>('original');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [partnerTyping, setPartnerTyping] = useState(false);\n  const [typingTimer, setTypingTimer] = useState<NodeJS.Timeout | null>(null);\n  const [isMobileChatOpen, setIsMobileChatOpen] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const isMobile = useIsMobile();\n  const isTablet = typeof window !== 'undefined' && window.innerWidth >= 768 && window.innerWidth <= 1024;\n\n  const {\n    localVideoRef,\n    remoteVideoRef,\n    mediaState,\n    toggleVideo,\n    toggleAudio,\n    startCall,\n    handleSignal,\n    callState,\n    isMediaReady,\n    reassignVideoStreams\n  } = useWebRTC({ \n    onSignal: onWebRTCSignal, \n    isInitiator \n  });\n\n  // Handle WebRTC signals from WebSocket\n  useEffect(() => {\n    const handleWebRTCSignal = (event: CustomEvent) => {\n      handleSignal(event.detail);\n    };\n\n    const handleMediaError = (event: CustomEvent) => {\n      setMediaError(event.detail);\n    };\n\n    const handleClearMediaError = () => {\n      setMediaError('');\n    };\n\n    window.addEventListener('webrtc_signal', handleWebRTCSignal as EventListener);\n    window.addEventListener('media_error', handleMediaError as EventListener);\n    window.addEventListener('clear_media_error', handleClearMediaError as EventListener);\n    \n    return () => {\n      window.removeEventListener('webrtc_signal', handleWebRTCSignal as EventListener);\n      window.removeEventListener('media_error', handleMediaError as EventListener);\n      window.removeEventListener('clear_media_error', handleClearMediaError as EventListener);\n    };\n  }, [handleSignal]);\n\n  // Initialize media immediately when component loads\n  useEffect(() => {\n    console.log('VideoChat component mounted, isWaiting:', isWaiting, 'isInitiator:', isInitiator);\n    \n    // Request media permissions immediately when component mounts\n    const timeoutId = setTimeout(() => {\n      startCall().catch((error) => {\n        console.error('Failed to initialize media:', error);\n        setMediaError('Failed to access camera/microphone. Please check permissions and refresh the page.');\n      });\n    }, 100);\n    \n    return () => clearTimeout(timeoutId);\n  }, []); // Remove dependencies to run only once on mount\n\n  // Force video stream reassignment when call state or media state changes\n  useEffect(() => {\n    if (callState === 'connected' && isMediaReady) {\n      console.log('Call connected and media ready, force reassigning video streams...');\n      const timeoutId = setTimeout(() => {\n        reassignVideoStreams();\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [callState, isMediaReady, reassignVideoStreams]);\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() && !isWaiting) {\n      onSendMessage(inputValue);\n      setInputValue('');\n      // Clear typing indicator when message is sent\n      handleStopTyping();\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setInputValue(value);\n    \n    // Real-time typing detection\n    if (value.trim() && !isWaiting) {\n      handleStartTyping();\n      \n      // Clear existing timer\n      if (typingTimer) {\n        clearTimeout(typingTimer);\n      }\n      \n      // Set new timer to stop typing after 1 second of inactivity\n      const newTimer = setTimeout(() => {\n        handleStopTyping();\n      }, 1000);\n      \n      setTypingTimer(newTimer);\n    } else if (!value.trim()) {\n      handleStopTyping();\n    }\n  };\n\n  const handleStartTyping = () => {\n    // TODO: Send typing start signal via WebSocket when backend supports it\n    // For now, typing indicator is only shown for received messages\n  };\n\n  const handleStopTyping = () => {\n    // TODO: Send typing stop signal via WebSocket when backend supports it\n    if (typingTimer) {\n      clearTimeout(typingTimer);\n      setTypingTimer(null);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  const handleLayoutChange = (layout: 'horizontal' | 'original') => {\n    setVideoLayout(layout);\n    \n    // Reassign video streams after layout change\n    setTimeout(() => {\n      console.log('Layout changed to:', layout, '- reassigning video streams');\n      reassignVideoStreams();\n    }, 150);\n  };\n\n  const handleTagSelect = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const availableTags = ['gaming', 'music', 'movies', 'sports', 'tech', 'art'];\n\n  const getConnectionStatus = () => {\n    if (isWaiting) return { text: 'Waiting...', color: 'text-yellow-400', icon: WifiOff };\n    if (callState === 'connected') return { text: 'Connected', color: 'text-green-400', icon: Wifi };\n    if (callState === 'connecting') return { text: 'Connecting', color: 'text-yellow-400', icon: WifiOff };\n    if (callState === 'failed') return { text: 'Disconnected', color: 'text-red-400', icon: WifiOff };\n    return { text: 'Paired', color: 'text-blue-400', icon: Wifi };\n  };\n\n  const connectionStatus = getConnectionStatus();\n\n  // Auto-scroll to bottom when new messages arrive\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, partnerTyping]); // Also scroll when typing indicator changes\n\n  // Reset typing indicator when waiting or partner changes\n  useEffect(() => {\n    if (isWaiting) {\n      setPartnerTyping(false);\n    }\n  }, [isWaiting]);\n\n  // Clean up typing timer when component unmounts\n  useEffect(() => {\n    return () => {\n      if (typingTimer) {\n        clearTimeout(typingTimer);\n      }\n    };\n  }, [typingTimer]);\n\n  // Ensure videos are properly displayed when layout changes\n  useEffect(() => {\n    if (callState === 'connected' || isMediaReady) {\n      // Small delay to ensure DOM elements are properly rendered after layout change\n      const timer = setTimeout(() => {\n        console.log('Re-initializing video streams for layout:', videoLayout);\n        reassignVideoStreams();\n        \n        // Force video elements to refresh by toggling their srcObject\n        setTimeout(() => {\n          if (localVideoRef.current && localVideoRef.current.srcObject) {\n            const localStream = localVideoRef.current.srcObject;\n            localVideoRef.current.srcObject = null;\n            setTimeout(() => {\n              if (localVideoRef.current) {\n                localVideoRef.current.srcObject = localStream;\n                localVideoRef.current.play().catch(console.error);\n              }\n            }, 50);\n          }\n          if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n            const remoteStream = remoteVideoRef.current.srcObject;\n            remoteVideoRef.current.srcObject = null;\n            setTimeout(() => {\n              if (remoteVideoRef.current) {\n                remoteVideoRef.current.srcObject = remoteStream;\n                remoteVideoRef.current.play().catch(console.error);\n              }\n            }, 50);\n          }\n        }, 100);\n      }, 300);\n      return () => clearTimeout(timer);\n    }\n  }, [videoLayout, callState, isMediaReady, reassignVideoStreams, localVideoRef, remoteVideoRef]);\n\n  return (\n    <div className={`h-screen overflow-hidden transition-colors duration-500 ${\n      isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'\n    } p-2 md:p-4`}>\n      <div className=\"w-full max-w-7xl mx-auto h-[calc(100vh-1rem)] md:h-[calc(100vh-2rem)] flex flex-col overflow-hidden\">\n        \n        {/* Header Section */}\n        <div className={`${\n          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\n        } border rounded-lg mb-4 p-4 transition-colors duration-300`}>\n          <div className=\"flex items-center justify-between\">\n            \n            {/* Left Section - Home Button */}\n            <div className=\"flex items-center space-x-4\">\n              {onGoHome && (\n                <Button\n                  onClick={onGoHome}\n                  className={`px-4 py-2 rounded-lg transform transition-all duration-200 hover:scale-105 ${\n                    isDarkMode \n                      ? 'bg-gray-700 hover:bg-gray-600 text-white' \n                      : 'bg-blue-600 hover:bg-blue-700 text-white'\n                  }`}\n                  data-testid=\"button-go-home\"\n                >\n                  <Home className=\"h-4 w-4 mr-2\" />\n                  Home\n                </Button>\n              )}\n            </div>\n\n            {/* Center Section - Layout Controls */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => handleLayoutChange('horizontal')}\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`w-10 h-10 rounded-full p-0 transition-all duration-200 ${\n                  videoLayout === 'horizontal' \n                    ? 'bg-blue-600 text-white hover:bg-blue-700' \n                    : isDarkMode \n                      ? 'bg-gray-700 text-gray-300 hover:bg-gray-600 border border-gray-600' \n                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300 border border-gray-300'\n                }`}\n                data-testid=\"button-layout-horizontal\"\n              >\n                <SplitSquareHorizontal className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                onClick={() => handleLayoutChange('original')}\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`w-10 h-10 rounded-full p-0 transition-all duration-200 ${\n                  videoLayout === 'original' \n                    ? 'bg-blue-600 text-white hover:bg-blue-700' \n                    : isDarkMode \n                      ? 'bg-gray-700 text-gray-300 hover:bg-gray-600 border border-gray-600' \n                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300 border border-gray-300'\n                }`}\n                data-testid=\"button-layout-original\"\n              >\n                <Square className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Right Section - Status and Controls */}\n            <div className=\"flex items-center space-x-4\">\n              \n              {/* Mute Status Indicator */}\n              <div className={`flex items-center space-x-2 px-3 py-1 rounded-full ${\n                mediaState.audio \n                  ? isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-700'\n                  : isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-700'\n              }`}>\n                {mediaState.audio ? <Mic className=\"h-3 w-3\" /> : <MicOff className=\"h-3 w-3\" />}\n                <span className=\"text-xs\">{mediaState.audio ? 'On' : 'Muted'}</span>\n              </div>\n\n              {/* Dark Mode Toggle */}\n              <Button\n                onClick={toggleDarkMode}\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`w-10 h-10 rounded-full p-0 transition-all duration-300 ${\n                  isDarkMode \n                    ? 'bg-gray-700 text-yellow-400 hover:bg-gray-600 border border-gray-600' \n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300 border border-gray-300'\n                }`}\n                data-testid=\"button-dark-mode\"\n              >\n                {isDarkMode ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className={`flex-1 flex gap-4 transition-all duration-500 overflow-hidden flex-col xl:flex-row`}>\n          \n          {/* Video Section */}\n          <div className={`flex flex-col min-h-0 overflow-hidden transition-all duration-500 flex-1`}>\n            \n            {/* Status message */}\n            {statusMessage && (\n              <div className={`mb-4 p-3 rounded-lg transition-colors duration-300 ${\n                isDarkMode \n                  ? 'bg-blue-900/50 border border-blue-700 text-blue-200' \n                  : 'bg-blue-100 border border-blue-300 text-blue-800'\n              }`}>\n                <p className=\"text-sm text-center\" data-testid=\"text-video-status\">\n                  {statusMessage}\n                </p>\n              </div>\n            )}\n\n            {/* Media error message */}\n            {mediaError && (\n              <div className={`mb-4 p-4 rounded-lg transition-colors duration-300 ${\n                isDarkMode \n                  ? 'bg-red-900/50 border border-red-700' \n                  : 'bg-red-100 border border-red-300'\n              }`}>\n                <p className={`text-sm text-center ${\n                  isDarkMode ? 'text-red-200' : 'text-red-800'\n                }`} data-testid=\"text-media-error\">\n                  {mediaError}\n                </p>\n              </div>\n            )}\n\n            {/* Video Container */}\n            <div className={`flex-1 relative rounded-lg overflow-hidden transition-colors duration-300 ${\n              isDarkMode ? 'bg-gray-800' : 'bg-gray-200'\n            }`}>\n              \n              {videoLayout === 'horizontal' ? (\n                /* Horizontal Split Layout - Two equal squares side by side */\n                <div className=\"flex h-full gap-2 p-2\">\n                  \n                  {/* Remote Video - Left Square */}\n                  <div className=\"w-1/2 aspect-square relative rounded-lg overflow-hidden\">\n                    <video\n                      ref={remoteVideoRef}\n                      autoPlay\n                      playsInline\n                      muted={isRemoteMuted}\n                      controls={false}\n                      className={`w-full h-full object-cover transition-all duration-500 ${\n                        isDarkMode ? 'bg-gray-900' : 'bg-gray-300'\n                      }`}\n                      data-testid=\"video-remote\"\n                      onLoadedMetadata={() => {\n                        console.log('Remote video metadata loaded (horizontal)');\n                        if (remoteVideoRef.current) {\n                          remoteVideoRef.current.play().catch(console.error);\n                        }\n                      }}\n                      onCanPlay={() => console.log('Remote video can play (horizontal)')}\n                    />\n                    \n                    {/* Remote video placeholder */}\n                    {(callState !== 'connected' || !isMediaReady) && (\n                      <div className={`absolute inset-0 flex items-center justify-center transition-colors duration-300 ${\n                        isDarkMode ? 'bg-gray-900' : 'bg-gray-300'\n                      }`}>\n                        <div className=\"text-center p-4\">\n                          <Users className={`h-12 w-12 mx-auto mb-2 ${\n                            isDarkMode ? 'text-gray-600' : 'text-gray-400'\n                          }`} />\n                          <p className={`text-sm ${\n                            isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                          }`}>\n                            {isWaiting ? 'Waiting...' : \n                             callState === 'connecting' ? 'Connecting...' :\n                             callState === 'failed' ? 'Failed' :\n                             'Preparing...'}\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Remote Video Label */}\n                    <div className=\"absolute top-2 left-2\">\n                      <div className={`px-2 py-1 rounded text-xs font-medium backdrop-blur-sm transition-colors duration-300 ${\n                        isDarkMode ? 'bg-black/50 text-white' : 'bg-white/80 text-gray-900'\n                      }`}>\n                        Stranger\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Local Video - Right Square */}\n                  <div className=\"w-1/2 aspect-square relative rounded-lg overflow-hidden\">\n                    <video\n                      ref={localVideoRef}\n                      autoPlay\n                      playsInline\n                      muted\n                      controls={false}\n                      className=\"w-full h-full object-cover transition-all duration-500\"\n                      data-testid=\"video-local\"\n                      style={{ \n                        transform: 'scaleX(-1)' // Mirror effect for local preview\n                      }}\n                      onLoadedMetadata={() => {\n                        console.log('Local video metadata loaded (horizontal)');\n                        if (localVideoRef.current) {\n                          localVideoRef.current.play().catch(console.error);\n                        }\n                      }}\n                      onCanPlay={() => console.log('Local video can play (horizontal)')}\n                    />\n                    \n                    {!mediaState.video && (\n                      <div className={`absolute inset-0 flex items-center justify-center transition-colors duration-300 ${\n                        isDarkMode ? 'bg-gray-800' : 'bg-gray-200'\n                      }`}>\n                        <VideoOff className={`h-12 w-12 ${\n                          isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                        }`} />\n                      </div>\n                    )}\n                    \n                    {/* Local Video Label */}\n                    <div className=\"absolute top-2 left-2\">\n                      <div className={`px-2 py-1 rounded text-xs font-medium backdrop-blur-sm transition-colors duration-300 ${\n                        isDarkMode ? 'bg-black/50 text-white' : 'bg-white/80 text-gray-900'\n                      }`}>\n                        You\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                /* Original Layout - Remote video full screen with local PiP */\n                <>\n                  {/* Remote video (main) */}\n                  <video\n                    ref={remoteVideoRef}\n                    autoPlay\n                    playsInline\n                    muted={isRemoteMuted}\n                    controls={false}\n                    className={`w-full h-full object-cover transition-all duration-500 ${\n                      isDarkMode ? 'bg-gray-900' : 'bg-gray-300'\n                    }`}\n                    data-testid=\"video-remote\"\n                    onLoadedMetadata={() => console.log('Remote video metadata loaded')}\n                    onCanPlay={() => console.log('Remote video can play')}\n                  />\n\n                  {/* Remote video placeholder */}\n                  {(callState !== 'connected' || !isMediaReady) && (\n                    <div className={`absolute inset-0 flex items-center justify-center transition-colors duration-300 ${\n                      isDarkMode ? 'bg-gray-900' : 'bg-gray-300'\n                    }`}>\n                      <div className=\"text-center max-w-md mx-auto p-4\">\n                        <Users className={`h-16 w-16 mx-auto mb-4 ${\n                          isDarkMode ? 'text-gray-600' : 'text-gray-400'\n                        }`} />\n                        <p className={`text-base mb-4 ${\n                          isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                        }`}>\n                          {isWaiting ? 'Waiting for partner...' : \n                           callState === 'connecting' ? 'Connecting to video...' :\n                           callState === 'failed' ? 'Video connection failed' :\n                           'Preparing video...'}\n                        </p>\n                        {callState === 'failed' && (\n                          <>\n                            <Button \n                              onClick={() => {\n                                setMediaError('');\n                                startCall().catch(console.error);\n                              }}\n                              className=\"mt-2 bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200\"\n                              data-testid=\"button-retry-video\"\n                            >\n                              Try Again\n                            </Button>\n                            <p className={`text-xs mt-2 ${\n                              isDarkMode ? 'text-gray-500' : 'text-gray-600'\n                            }`}>\n                              Make sure to allow camera and microphone permissions when prompted\n                            </p>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Local video (picture-in-picture) - with mirror effect for local preview */}\n                  <div className={`absolute bottom-4 right-4 w-32 h-24 lg:w-48 lg:h-36 rounded-lg overflow-hidden border-2 shadow-lg transition-all duration-500 ${\n                    isDarkMode ? 'bg-gray-900 border-gray-600' : 'bg-white border-gray-400'\n                  }`}>\n                    <video\n                      ref={localVideoRef}\n                      autoPlay\n                      playsInline\n                      muted\n                      controls={false}\n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"video-local\"\n                      style={{ \n                        maxHeight: '100%', \n                        maxWidth: '100%', \n                        transform: 'scaleX(-1)' // Mirror effect for local preview\n                      }}\n                      onLoadedMetadata={() => console.log('Local video metadata loaded')}\n                      onCanPlay={() => console.log('Local video can play')}\n                    />\n                    {!mediaState.video && (\n                      <div className={`absolute inset-0 flex items-center justify-center transition-colors duration-300 ${\n                        isDarkMode ? 'bg-gray-800' : 'bg-gray-200'\n                      }`}>\n                        <VideoOff className={`h-8 w-8 ${\n                          isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                        }`} />\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n\n              {/* Connection Status & Logo - Only show in non-horizontal layout */}\n              {videoLayout !== 'horizontal' && (\n                <div className=\"absolute bottom-4 left-4 flex items-center space-x-2\">\n                  <div className={`flex items-center space-x-2 px-3 py-1 rounded-full backdrop-blur-sm transition-colors duration-300 ${\n                    isDarkMode ? 'bg-black/50 text-white' : 'bg-white/80 text-gray-900'\n                  }`}>\n                    <connectionStatus.icon className={`h-3 w-3 ${connectionStatus.color}`} />\n                    <span className=\"text-xs font-medium\">{connectionStatus.text}</span>\n                    <div className=\"w-1 h-1 bg-blue-500 rounded-full\"></div>\n                    <span className=\"text-xs font-bold\">StrangerChat</span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Controls Row */}\n            <div className=\"mt-4 flex justify-center items-center space-x-2 md:space-x-4 flex-wrap\">\n              <Button\n                onClick={toggleVideo}\n                className={`flex items-center ${isMobile ? 'px-3 py-2' : 'space-x-2 px-4 py-2'} rounded-lg transition-all duration-200 transform hover:scale-105 ${\n                  mediaState.video \n                    ? 'bg-blue-600 hover:bg-blue-700 text-white' \n                    : 'bg-red-600 hover:bg-red-700 text-white'\n                }`}\n                data-testid=\"button-toggle-video\"\n              >\n                {mediaState.video ? <Video className=\"h-4 w-4\" /> : <VideoOff className=\"h-4 w-4\" />}\n                {!isMobile && <span className=\"ml-2\">{mediaState.video ? 'Video On' : 'Video Off'}</span>}\n              </Button>\n              \n              <Button\n                onClick={toggleAudio}\n                className={`flex items-center ${isMobile ? 'px-3 py-2' : 'space-x-2 px-4 py-2'} rounded-lg transition-all duration-200 transform hover:scale-105 ${\n                  mediaState.audio \n                    ? 'bg-green-600 hover:bg-green-700 text-white' \n                    : 'bg-red-600 hover:bg-red-700 text-white'\n                }`}\n                data-testid=\"button-toggle-audio\"\n              >\n                {mediaState.audio ? <Mic className=\"h-4 w-4\" /> : <MicOff className=\"h-4 w-4\" />}\n                {!isMobile && <span className=\"ml-2\">{mediaState.audio ? 'Mic On' : 'Mic Off'}</span>}\n              </Button>\n              \n              <Button\n                onClick={() => setIsRemoteMuted(!isRemoteMuted)}\n                className={`flex items-center ${isMobile ? 'px-3 py-2' : 'space-x-2 px-4 py-2'} rounded-lg transition-all duration-200 transform hover:scale-105 ${\n                  !isRemoteMuted \n                    ? 'bg-purple-600 hover:bg-purple-700 text-white' \n                    : 'bg-orange-600 hover:bg-orange-700 text-white'\n                }`}\n                data-testid=\"button-mute-remote\"\n              >\n                {isRemoteMuted ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                {!isMobile && <span className=\"ml-2\">{isRemoteMuted ? 'Unmute Them' : 'Mute Them'}</span>}\n              </Button>\n\n              {/* Chat Toggle Button - Only show on mobile/tablet */}\n              {(isMobile || isTablet) && (\n                <Button\n                  onClick={() => setIsMobileChatOpen(!isMobileChatOpen)}\n                  className={`flex items-center ${isMobile ? 'px-3 py-2' : 'space-x-2 px-4 py-2'} rounded-lg transition-all duration-200 transform hover:scale-105 ${\n                    isMobileChatOpen\n                      ? 'bg-blue-600 hover:bg-blue-700 text-white'\n                      : isDarkMode \n                        ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' \n                        : 'bg-gray-200 hover:bg-gray-300 text-gray-700'\n                  }`}\n                  data-testid=\"button-toggle-chat\"\n                >\n                  <MessageSquare className=\"h-4 w-4\" />\n                  {!isMobile && <span className=\"ml-2\">Chat</span>}\n                </Button>\n              )}\n\n              {/* Report Button */}\n              <Button\n                onClick={onReportUser}\n                variant=\"outline\"\n                disabled={isWaiting}\n                className={`flex items-center ${isMobile ? 'px-3 py-2' : 'space-x-2 px-3 py-2'} rounded-lg transition-all duration-200 ${\n                  isDarkMode \n                    ? 'text-red-400 border-red-600 hover:bg-red-900/20' \n                    : 'text-red-600 border-red-400 hover:bg-red-50'\n                }`}\n                data-testid=\"button-report-video\"\n              >\n                <Flag className=\"h-4 w-4\" />\n                {!isMobile && <span className=\"ml-2\">Report</span>}\n              </Button>\n            </div>\n\n            {/* Next Button - Show below media controls on mobile/tablet */}\n            {(isMobile || isTablet) && (\n              <Button\n                onClick={onNextUser}\n                className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white py-3 rounded-sm transition-all duration-200 font-medium\"\n                data-testid=\"button-mobile-next-video\"\n              >\n                ► Next\n              </Button>\n            )}\n          </div>\n\n          {/* Text Chat Section - Hidden on mobile/tablet */}\n          <div className={`flex-col overflow-hidden transition-all duration-500 w-full xl:w-80 ${\n            isMobile || isTablet ? 'hidden' : 'flex'\n          }`}>\n            <Card className={`flex flex-col h-[466px] transition-colors duration-300 ${\n              isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\n            }`}>\n              {/* Header with border */}\n              <CardHeader className={`pb-3 px-4 flex-shrink-0 border-b transition-colors duration-300 ${\n                isDarkMode ? 'border-gray-700' : 'border-gray-300'\n              }`}>\n                <h3 className={`font-semibold transition-colors duration-300 ${\n                  isDarkMode ? 'text-white' : 'text-gray-900'\n                }`}>Text Chat</h3>\n              </CardHeader>\n              \n              <CardContent className=\"flex-1 flex flex-col p-0 min-h-0\">\n                {/* Messages Container - Fixed height with internal scrolling */}\n                <div className=\"flex-1 overflow-hidden relative\">\n                  <ScrollArea className=\"h-full\" data-testid=\"area-video-messages\">\n                    <div className=\"p-4 space-y-3\">\n                      {messages.length === 0 ? (\n                        <div className={`text-center text-sm mt-4 transition-colors duration-300 ${\n                          isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                        }`}>\n                          <p>Send a message to start chatting</p>\n                        </div>\n                      ) : (\n                        <>\n                          {messages.map((message) => (\n                            <div key={message.id} className=\"space-y-1\" data-testid={`video-message-${message.id}`}>\n                              {/* Message Label */}\n                              <div className={`text-xs font-medium ${\n                                message.isOwn ? 'text-right' : 'text-left'\n                              } ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                                {message.isOwn ? 'You' : 'Stranger'}\n                              </div>\n                              \n                              {/* Message Bubble */}\n                              <div className={`flex ${message.isOwn ? 'justify-end' : 'justify-start'}`}>\n                                <div className={`max-w-xs px-3 py-2 rounded-lg text-sm transition-colors duration-300 ${\n                                  message.isOwn\n                                    ? 'bg-blue-600 text-white rounded-br-sm'\n                                    : isDarkMode ? 'bg-gray-700 text-gray-200 rounded-bl-sm' : 'bg-gray-200 text-gray-800 rounded-bl-sm'\n                                }`}>\n                                  <p className=\"break-words\">{message.content}</p>\n                                  <p className=\"text-xs mt-1 opacity-70\">\n                                    {new Date(message.timestamp).toLocaleTimeString([], {\n                                      hour: '2-digit',\n                                      minute: '2-digit'\n                                    })}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          \n                          {/* Typing Indicator - Only shows when partner is actually typing (WebSocket controlled) */}\n                          {partnerTyping && !isWaiting && (\n                            <div className=\"space-y-1\">\n                              <div className={`text-xs font-medium text-left ${\n                                isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                              }`}>\n                                Stranger\n                              </div>\n                              <div className=\"flex justify-start\">\n                                <div className={`px-3 py-2 rounded-lg rounded-bl-sm text-sm ${\n                                  isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-700'\n                                }`}>\n                                  <div className=\"flex space-x-1\">\n                                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{animationDelay: '0ms'}}></div>\n                                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{animationDelay: '150ms'}}></div>\n                                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{animationDelay: '300ms'}}></div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Invisible div to scroll to */}\n                          <div ref={messagesEndRef} />\n                        </>\n                      )}\n                    </div>\n                  </ScrollArea>\n                </div>\n\n                {/* Input - Fixed at bottom */}\n                <div className={`border-t p-4 flex-shrink-0 transition-colors duration-300 ${\n                  isDarkMode ? 'border-gray-700' : 'border-gray-300'\n                }`}>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      value={inputValue}\n                      onChange={handleInputChange}\n                      onKeyPress={handleKeyPress}\n                      placeholder={isWaiting ? \"Waiting...\" : \"Type message...\"}\n                      disabled={isWaiting}\n                      className={`flex-1 transition-colors duration-300 ${\n                        isDarkMode \n                          ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' \n                          : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'\n                      }`}\n                      maxLength={1000}\n                      data-testid=\"input-video-message\"\n                    />\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={!inputValue.trim() || isWaiting}\n                      size=\"icon\"\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200\"\n                      data-testid=\"button-video-send\"\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n\n\n              </CardContent>\n            </Card>\n            \n            {/* Next Button - Bottom of Text Chat Section */}\n            <Button\n              onClick={onNextUser}\n              className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white py-3 rounded-sm transition-all duration-200 font-medium\"\n              data-testid=\"button-next-video\"\n            >\n              ► Next\n            </Button>\n          </div>\n        </div>\n\n        {/* Tags Row */}\n        <div className={`mt-4 p-4 rounded-lg transition-colors duration-300 ${\n          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\n        } border`}>\n          <div className=\"flex flex-wrap gap-2 items-center\">\n            <span className={`text-sm font-medium transition-colors duration-300 ${\n              isDarkMode ? 'text-gray-300' : 'text-gray-700'\n            }`}>\n              Interests:\n            </span>\n            {availableTags.map((tag) => (\n              <Button\n                key={tag}\n                onClick={() => handleTagSelect(tag)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`px-3 py-1 rounded-full transition-all duration-200 transform hover:scale-105 ${\n                  selectedTags.includes(tag)\n                    ? 'bg-blue-600 text-white hover:bg-blue-700'\n                    : isDarkMode \n                      ? 'bg-gray-700 text-gray-300 hover:bg-gray-600 border border-gray-600' \n                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300 border border-gray-300'\n                }`}\n                data-testid={`tag-${tag}`}\n              >\n                {tag}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile/Tablet Chat Overlay */}\n      {(isMobile || isTablet) && (\n        <>\n          {/* Backdrop */}\n          {isMobileChatOpen && (\n            <div \n              className=\"fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity duration-300\"\n              onClick={() => setIsMobileChatOpen(false)}\n            />\n          )}\n          \n          {/* Chat Overlay */}\n          <div className={`fixed bottom-0 left-0 right-0 z-50 transform transition-transform duration-300 ease-out ${\n            isMobileChatOpen ? 'translate-y-0' : 'translate-y-full'\n          }`}>\n            <Card className={`rounded-t-2xl border-t border-x-0 border-b-0 transition-colors duration-300 flex flex-col ${\n              isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\n            }`} style={{ height: '45vh', minHeight: '300px', maxHeight: '500px' }}>\n              {/* Header with close button */}\n              <CardHeader className={`pb-3 px-4 flex-shrink-0 border-b transition-colors duration-300 flex flex-row items-center justify-between ${\n                isDarkMode ? 'border-gray-700' : 'border-gray-300'\n              }`}>\n                <h3 className={`font-semibold transition-colors duration-300 ${\n                  isDarkMode ? 'text-white' : 'text-gray-900'\n                }`}>Text Chat</h3>\n                <Button\n                  onClick={() => setIsMobileChatOpen(false)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className={`p-1 h-8 w-8 rounded-full ${\n                    isDarkMode ? 'hover:bg-gray-700 text-gray-400' : 'hover:bg-gray-100 text-gray-600'\n                  }`}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </CardHeader>\n              \n              <CardContent className=\"flex-1 flex flex-col p-0 min-h-0 overflow-hidden\">\n                {/* Messages Container - Fixed height with internal scrolling */}\n                <div className=\"flex-1 overflow-hidden relative\">\n                  <ScrollArea className=\"h-full max-h-full\" data-testid=\"area-mobile-video-messages\">\n                    <div className=\"p-4 space-y-3\">\n                      {messages.length === 0 ? (\n                        <div className={`text-center text-sm mt-4 transition-colors duration-300 ${\n                          isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                        }`}>\n                          <p>Send a message to start chatting</p>\n                        </div>\n                      ) : (\n                        <>\n                          {messages.map((message) => (\n                            <div key={message.id} className=\"space-y-1\" data-testid={`mobile-video-message-${message.id}`}>\n                              {/* Message Label */}\n                              <div className={`text-xs font-medium ${\n                                message.isOwn ? 'text-right' : 'text-left'\n                              } ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                                {message.isOwn ? 'You' : 'Stranger'}\n                              </div>\n                              \n                              {/* Message Bubble */}\n                              <div className={`flex ${message.isOwn ? 'justify-end' : 'justify-start'}`}>\n                                <div className={`max-w-xs px-3 py-2 rounded-lg text-sm transition-colors duration-300 ${\n                                  message.isOwn\n                                    ? 'bg-blue-600 text-white rounded-br-sm'\n                                    : isDarkMode ? 'bg-gray-700 text-gray-200 rounded-bl-sm' : 'bg-gray-200 text-gray-800 rounded-bl-sm'\n                                }`}>\n                                  <p className=\"break-words\">{message.content}</p>\n                                  <p className=\"text-xs mt-1 opacity-70\">\n                                    {new Date(message.timestamp).toLocaleTimeString([], {\n                                      hour: '2-digit',\n                                      minute: '2-digit'\n                                    })}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          \n                          {/* Typing Indicator */}\n                          {partnerTyping && !isWaiting && (\n                            <div className=\"space-y-1\">\n                              <div className={`text-xs font-medium text-left ${\n                                isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                              }`}>\n                                Stranger\n                              </div>\n                              <div className=\"flex justify-start\">\n                                <div className={`px-3 py-2 rounded-lg rounded-bl-sm text-sm ${\n                                  isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-700'\n                                }`}>\n                                  <div className=\"flex space-x-1\">\n                                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{animationDelay: '0ms'}}></div>\n                                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{animationDelay: '150ms'}}></div>\n                                    <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{animationDelay: '300ms'}}></div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Invisible div to scroll to */}\n                          <div ref={messagesEndRef} />\n                        </>\n                      )}\n                    </div>\n                  </ScrollArea>\n                </div>\n\n                {/* Input Section */}\n                <div className={`border-t p-4 flex-shrink-0 transition-colors duration-300 ${\n                  isDarkMode ? 'border-gray-700' : 'border-gray-300'\n                }`}>\n                  <div className=\"flex space-x-2 mb-3\">\n                    <Input\n                      value={inputValue}\n                      onChange={handleInputChange}\n                      onKeyPress={handleKeyPress}\n                      placeholder={isWaiting ? \"Waiting...\" : \"Type message...\"}\n                      disabled={isWaiting}\n                      className={`flex-1 transition-colors duration-300 ${\n                        isDarkMode \n                          ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' \n                          : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'\n                      }`}\n                      maxLength={1000}\n                      data-testid=\"input-mobile-video-message\"\n                    />\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={!inputValue.trim() || isWaiting}\n                      size=\"icon\"\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200\"\n                      data-testid=\"button-mobile-video-send\"\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":45748},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useSocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport type { ChatMessage, WebRTCSignal } from '@shared/schema';\n\ntype SocketState = 'connecting' | 'connected' | 'waiting' | 'paired' | 'video_waiting' | 'video_paired' | 'disconnected';\n\ninterface UseSocketReturn {\n  socketState: SocketState;\n  messages: ChatMessage[];\n  sendMessage: (content: string) => void;\n  joinQueue: () => void;\n  startVideoChat: () => void;\n  nextUser: () => void;\n  reportUser: () => void;\n  sendWebRTCSignal: (signal: WebRTCSignal) => void;\n  statusMessage: string;\n  isInitiator: boolean;\n}\n\nexport function useSocket(): UseSocketReturn {\n  const ws = useRef<WebSocket | null>(null);\n  const [socketState, setSocketState] = useState<SocketState>('disconnected');\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [isInitiator, setIsInitiator] = useState(false);\n\n  const connect = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) return;\n\n    // In Replit, we need to connect via the same origin as the web app\n    // The backend server handles both HTTP and WebSocket on the same port\n    let wsUrl: string;\n    \n    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n      // Local development\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      wsUrl = `${protocol}//${window.location.host}/ws`;\n    } else {\n      // Replit environment - use the same host but ensure proper protocol\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      wsUrl = `${protocol}//${window.location.host}/ws`;\n    }\n    \n    console.log('Connecting to WebSocket:', wsUrl);\n    \n    try {\n      ws.current = new WebSocket(wsUrl);\n      setSocketState('connecting');\n      setStatusMessage('Connecting...');\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setSocketState('disconnected');\n      setStatusMessage('Connection failed');\n      return;\n    }\n\n    ws.current.onopen = () => {\n      console.log('WebSocket connection opened successfully');\n      setSocketState('connected');\n      setStatusMessage('Connected! Click \"Start Chat\" to find someone to talk to.');\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        console.log('WebSocket message received:', event.data);\n        const data = JSON.parse(event.data);\n        \n        switch (data.type) {\n          case 'connected':\n            console.log('Received connected message, socket ID:', data.socketId);\n            setSocketState('connected');\n            setStatusMessage('Connected! Click \"Start Chat\" to find someone to talk to.');\n            break;\n            \n          case 'waiting':\n            setSocketState('waiting');\n            setStatusMessage(data.message || 'Looking for someone to chat with...');\n            setMessages([]); // Clear previous messages\n            break;\n            \n          case 'paired':\n            setSocketState('paired');\n            setStatusMessage('You are now connected to a stranger!');\n            setMessages([]); // Clear previous messages\n            setIsInitiator(false);\n            break;\n            \n          case 'video_waiting':\n            setSocketState('video_waiting');\n            setStatusMessage(data.message || 'Looking for someone to video chat with...');\n            setMessages([]); // Clear previous messages\n            break;\n            \n          case 'video_paired':\n            console.log('Video paired received, isInitiator:', data.isInitiator);\n            setSocketState('video_paired');\n            setStatusMessage(data.message || 'Connected for video chat! Preparing video...');\n            setMessages([]); // Clear previous messages\n            setIsInitiator(data.isInitiator || false);\n            break;\n            \n          case 'webrtc_signal':\n            // This will be handled by the video chat component\n            window.dispatchEvent(new CustomEvent('webrtc_signal', { detail: data.signal }));\n            break;\n            \n          case 'message':\n            setMessages(prev => [...prev, data.message]);\n            break;\n            \n          case 'message_sent':\n            setMessages(prev => [...prev, data.message]);\n            break;\n            \n          case 'partner_disconnected':\n            setSocketState('connected');\n            setStatusMessage(data.message || 'Your partner has disconnected');\n            setMessages([]);\n            break;\n            \n          case 'report_submitted':\n            setStatusMessage(data.message || 'Report submitted');\n            break;\n            \n          case 'error':\n            setStatusMessage(`Error: ${data.message}`);\n            break;\n            \n          default:\n            console.log('Unknown message type:', data.type);\n        }\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = (event) => {\n      console.log('WebSocket connection closed:', event.code, event.reason);\n      setSocketState('disconnected');\n      setStatusMessage('Disconnected from server');\n      setMessages([]);\n      \n      // Only attempt to reconnect if it wasn't a clean close\n      if (event.code !== 1000) {\n        console.log('Attempting to reconnect in 3 seconds...');\n        setTimeout(() => {\n          connect();\n        }, 3000);\n      }\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setStatusMessage('Connection error - retrying...');\n    };\n  }, []);\n\n  const sendMessage = useCallback((content: string) => {\n    if (ws.current?.readyState === WebSocket.OPEN && content.trim()) {\n      ws.current.send(JSON.stringify({\n        type: 'send_message',\n        content: content.trim()\n      }));\n    }\n  }, []);\n\n  const joinQueue = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify({\n        type: 'join_queue'\n      }));\n      setStatusMessage('Looking for someone to chat with...');\n    }\n  }, []);\n\n  const startVideoChat = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify({\n        type: 'start_video'\n      }));\n      setStatusMessage('Looking for someone to video chat with...');\n    }\n  }, []);\n\n  const sendWebRTCSignal = useCallback((signal: WebRTCSignal) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify({\n        type: 'webrtc_signal',\n        signal\n      }));\n    }\n  }, []);\n\n  const nextUser = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      const isVideoMode = socketState === 'video_paired' || socketState === 'video_waiting';\n      ws.current.send(JSON.stringify({\n        type: 'next_user',\n        videoMode: isVideoMode\n      }));\n      setMessages([]);\n      setStatusMessage(isVideoMode ? 'Looking for a new person to video chat with...' : 'Looking for a new person to chat with...');\n    }\n  }, [socketState]);\n\n  const reportUser = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify({\n        type: 'report_user'\n      }));\n    }\n  }, []);\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [connect]);\n\n  return {\n    socketState,\n    messages,\n    sendMessage,\n    joinQueue,\n    startVideoChat,\n    nextUser,\n    reportUser,\n    sendWebRTCSignal,\n    statusMessage,\n    isInitiator\n  };\n}\n","size_bytes":7686},"client/src/hooks/useWebRTC.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport type { WebRTCSignal, MediaState } from '@shared/schema';\n\ninterface UseWebRTCProps {\n  onSignal: (signal: WebRTCSignal) => void;\n  isInitiator?: boolean;\n}\n\ninterface UseWebRTCReturn {\n  localVideoRef: React.RefObject<HTMLVideoElement>;\n  remoteVideoRef: React.RefObject<HTMLVideoElement>;\n  mediaState: MediaState;\n  toggleVideo: () => void;\n  toggleAudio: () => void;\n  startCall: () => Promise<void>;\n  handleSignal: (signal: WebRTCSignal) => Promise<void>;\n  callState: 'idle' | 'connecting' | 'connected' | 'failed';\n  isMediaReady: boolean;\n  reassignVideoStreams: () => void;\n}\n\n// ICE servers configuration for WebRTC - Multiple STUN servers for better NAT traversal\nconst iceServers = [\n  // Google STUN servers\n  { urls: 'stun:stun.l.google.com:19302' },\n  { urls: 'stun:stun1.l.google.com:19302' },\n  { urls: 'stun:stun2.l.google.com:19302' },\n  { urls: 'stun:stun3.l.google.com:19302' },\n  { urls: 'stun:stun4.l.google.com:19302' },\n  // Additional reliable STUN servers\n  { urls: 'stun:stun.services.mozilla.com' },\n  { urls: 'stun:stun.stunprotocol.org:3478' },\n  { urls: 'stun:stun.voiparound.com' },\n  { urls: 'stun:stun.voipbuster.com' },\n  { urls: 'stun:stun.voipstunt.com' },\n  // OpenRelay TURN servers for when STUN fails (free public TURN servers)\n  { \n    urls: 'turn:openrelay.metered.ca:80',\n    username: 'openrelayproject',\n    credential: 'openrelayproject'\n  },\n  { \n    urls: 'turn:openrelay.metered.ca:443',\n    username: 'openrelayproject',\n    credential: 'openrelayproject'\n  },\n  { \n    urls: 'turn:openrelay.metered.ca:443?transport=tcp',\n    username: 'openrelayproject',\n    credential: 'openrelayproject'\n  }\n];\n\nexport function useWebRTC({ onSignal, isInitiator = false }: UseWebRTCProps): UseWebRTCReturn {\n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const remoteVideoRef = useRef<HTMLVideoElement>(null);\n  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\n  const localStreamRef = useRef<MediaStream | null>(null);\n  const remoteStreamRef = useRef<MediaStream | null>(null);\n  \n  const [mediaState, setMediaState] = useState<MediaState>({\n    video: true,\n    audio: true\n  });\n  \n  const [callState, setCallState] = useState<'idle' | 'connecting' | 'connected' | 'failed'>('idle');\n  const [isMediaReady, setIsMediaReady] = useState(false);\n  const retryCountRef = useRef(0);\n  const maxRetries = 3;\n\n  // Initialize peer connection\n  const initializePeerConnection = useCallback(() => {\n    const peerConnection = new RTCPeerConnection({\n      iceServers,\n      iceCandidatePoolSize: 10, // Pre-gather more ICE candidates\n      iceTransportPolicy: 'all', // Use both STUN and TURN servers\n      bundlePolicy: 'max-bundle', // Bundle media streams for better connectivity\n      rtcpMuxPolicy: 'require' // Multiplex RTP and RTCP for better NAT traversal\n    });\n\n    peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        // Log candidate information for debugging NAT traversal\n        console.log('ICE candidate generated:', {\n          type: event.candidate.type,\n          protocol: event.candidate.protocol,\n          address: event.candidate.address,\n          port: event.candidate.port\n        });\n        \n        onSignal({\n          type: 'ice-candidate',\n          data: event.candidate,\n          from: '',\n          to: ''\n        });\n      } else {\n        console.log('ICE candidate gathering completed');\n      }\n    };\n\n    peerConnection.ontrack = (event) => {\n      console.log('Remote track received:', event.track.kind, event.streams.length);\n      \n      // Store remote stream\n      if (event.streams[0]) {\n        console.log('Storing remote stream with tracks:', event.streams[0].getTracks().length);\n        remoteStreamRef.current = event.streams[0];\n        \n        // Immediately assign to video element\n        if (remoteVideoRef.current) {\n          console.log('Assigning remote stream to video element');\n          remoteVideoRef.current.srcObject = event.streams[0];\n          \n          // Force play with more aggressive retry\n          const playVideo = async () => {\n            try {\n              await remoteVideoRef.current?.play();\n              console.log('Remote video playing successfully');\n            } catch (error) {\n              console.log('Remote video play failed, retrying...', error);\n              setTimeout(playVideo, 500);\n            }\n          };\n          playVideo();\n        }\n      }\n      \n      // Update call state when we have video track\n      if (event.track.kind === 'video') {\n        console.log('Video track received, updating call state to connected');\n        setCallState('connected');\n      }\n    };\n\n    peerConnection.onconnectionstatechange = () => {\n      console.log('Connection state:', peerConnection.connectionState);\n      if (peerConnection.connectionState === 'connected') {\n        setCallState('connected');\n      } else if (peerConnection.connectionState === 'failed') {\n        console.log('WebRTC connection failed, retrying...');\n        setCallState('failed');\n      }\n    };\n\n    peerConnection.oniceconnectionstatechange = () => {\n      console.log('ICE connection state:', peerConnection.iceConnectionState);\n      if (peerConnection.iceConnectionState === 'connected' || \n          peerConnection.iceConnectionState === 'completed') {\n        console.log('ICE connection established successfully');\n        retryCountRef.current = 0; // Reset retry count on successful connection\n      } else if (peerConnection.iceConnectionState === 'failed') {\n        console.log('ICE connection failed - NAT traversal unsuccessful');\n        \n        // Attempt to restart ICE if retries are available\n        if (retryCountRef.current < maxRetries) {\n          console.log(`Retrying WebRTC connection (attempt ${retryCountRef.current + 1}/${maxRetries})`);\n          retryCountRef.current++;\n          \n          // Trigger ICE restart by creating a new offer\n          if (isInitiator) {\n            setTimeout(async () => {\n              try {\n                const offer = await peerConnection.createOffer({ iceRestart: true });\n                await peerConnection.setLocalDescription(offer);\n                onSignal({\n                  type: 'offer',\n                  data: offer,\n                  from: '',\n                  to: ''\n                });\n              } catch (error) {\n                console.error('Error during ICE restart:', error);\n                setCallState('failed');\n              }\n            }, 2000); // Wait 2 seconds before retrying\n          }\n        } else {\n          console.log('Max retries reached, connection failed permanently');\n          setCallState('failed');\n        }\n      }\n    };\n\n    peerConnection.onicegatheringstatechange = () => {\n      console.log('ICE gathering state:', peerConnection.iceGatheringState);\n    };\n\n    peerConnectionRef.current = peerConnection;\n    return peerConnection;\n  }, [onSignal]);\n\n  // Get user media with direct constraints\n  const getUserMedia = useCallback(async (): Promise<MediaStream> => {\n    try {\n      console.log('Requesting camera and microphone permissions...');\n      \n      // Check if media devices are available\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        throw new Error('Media devices not supported in this browser');\n      }\n      \n      // Direct media access with basic constraints\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'user',\n          width: { ideal: 640 },\n          height: { ideal: 480 }\n        },\n        audio: true\n      });\n      \n      console.log('Media access successful with tracks:', stream.getTracks().length);\n\n      console.log('Media stream obtained with', stream.getTracks().length, 'tracks');\n      localStreamRef.current = stream;\n      \n      // Assign local stream to video element immediately\n      if (localVideoRef.current) {\n        console.log('Assigning local stream to video element');\n        localVideoRef.current.srcObject = stream;\n        \n        // Force play immediately\n        try {\n          await localVideoRef.current.play();\n          console.log('Local video started playing');\n        } catch (error) {\n          console.log('Local video autoplay prevented:', error);\n        }\n      }\n\n      // Set initial media state based on stream tracks\n      const videoTrack = stream.getVideoTracks()[0];\n      const audioTrack = stream.getAudioTracks()[0];\n      \n      console.log('Video track:', videoTrack?.enabled, 'Audio track:', audioTrack?.enabled);\n      \n      setMediaState({\n        video: videoTrack?.enabled || false,\n        audio: audioTrack?.enabled || false\n      });\n\n      setIsMediaReady(true);\n      return stream;\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n      \n      let errorMessage = 'Failed to access camera/microphone';\n      if (error instanceof Error) {\n        console.log('Media access error details:', error.name, error.message);\n        if (error.name === 'NotAllowedError') {\n          errorMessage = 'Camera permission denied. Please refresh the page and click \"Allow\" when prompted.';\n        } else if (error.name === 'NotFoundError') {\n          errorMessage = 'No camera found. Please connect a camera and refresh the page.';\n        } else if (error.name === 'NotReadableError') {\n          errorMessage = 'Camera is busy. Please close other apps using your camera and refresh.';\n        } else {\n          errorMessage = 'Cannot access camera. Please check permissions and refresh the page.';\n        }\n      }\n      \n      // Emit a custom event to show error to user\n      window.dispatchEvent(new CustomEvent('media_error', { detail: errorMessage }));\n      \n      setCallState('failed');\n      throw error;\n    }\n  }, []);\n\n  // Start the call\n  const startCall = useCallback(async () => {\n    try {\n      console.log('Starting WebRTC call, isInitiator:', isInitiator);\n      setCallState('connecting');\n      \n      // Clean up any existing peer connection\n      if (peerConnectionRef.current) {\n        console.log('Closing existing peer connection');\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n      \n      // Clear any previous media error state\n      window.dispatchEvent(new CustomEvent('clear_media_error'));\n      \n      const stream = await getUserMedia();\n      const peerConnection = initializePeerConnection();\n\n      // Add local stream tracks to peer connection\n      stream.getTracks().forEach(track => {\n        console.log('Adding track to peer connection:', track.kind);\n        peerConnection.addTrack(track, stream);\n      });\n\n      // Set up local offer creation for initiator\n      if (isInitiator) {\n        console.log('Initiator creating offer...');\n        // Wait for ICE gathering to start before creating offer\n        const waitForIceGathering = new Promise<void>((resolve) => {\n          if (peerConnection.iceGatheringState === 'gathering' || peerConnection.iceGatheringState === 'complete') {\n            resolve();\n          } else {\n            const checkIceState = () => {\n              if (peerConnection.iceGatheringState === 'gathering' || peerConnection.iceGatheringState === 'complete') {\n                peerConnection.removeEventListener('icegatheringstatechange', checkIceState);\n                resolve();\n              }\n            };\n            peerConnection.addEventListener('icegatheringstatechange', checkIceState);\n            \n            // Fallback timeout\n            setTimeout(resolve, 200);\n          }\n        });\n        \n        await waitForIceGathering;\n        \n        try {\n          const offer = await peerConnection.createOffer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true,\n            iceRestart: false\n          });\n          await peerConnection.setLocalDescription(offer);\n          console.log('Offer created and set as local description');\n\n          onSignal({\n            type: 'offer',\n            data: offer,\n            from: '',\n            to: ''\n          });\n        } catch (offerError) {\n          console.error('Error creating offer:', offerError);\n          setCallState('failed');\n        }\n      } else {\n        console.log('Non-initiator waiting for offer...');\n      }\n    } catch (error) {\n      console.error('Error starting call:', error);\n      setCallState('failed');\n      // Emit error event for UI display\n      window.dispatchEvent(new CustomEvent('media_error', { detail: 'Failed to start video call. Please try again.' }));\n    }\n  }, [getUserMedia, initializePeerConnection, isInitiator, onSignal]);\n\n  // Handle WebRTC signals\n  const handleSignal = useCallback(async (signal: WebRTCSignal) => {\n    const peerConnection = peerConnectionRef.current;\n    if (!peerConnection) {\n      console.log('No peer connection available for signal:', signal.type);\n      return;\n    }\n\n    try {\n      console.log('Handling WebRTC signal:', signal.type);\n      switch (signal.type) {\n        case 'offer':\n          console.log('Received offer, setting remote description...');\n          await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.data));\n          \n          // Get user media if not already available\n          if (!localStreamRef.current) {\n            console.log('Getting user media for answer...');\n            const stream = await getUserMedia();\n            stream.getTracks().forEach(track => {\n              console.log('Adding track for answer:', track.kind);\n              peerConnection.addTrack(track, stream);\n            });\n          }\n\n          console.log('Creating answer...');\n          const answer = await peerConnection.createAnswer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n          });\n          await peerConnection.setLocalDescription(answer);\n          console.log('Answer created and set as local description');\n\n          onSignal({\n            type: 'answer',\n            data: answer,\n            from: '',\n            to: ''\n          });\n          break;\n\n        case 'answer':\n          console.log('Received answer, setting remote description...');\n          await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.data));\n          console.log('Remote description set successfully');\n          break;\n\n        case 'ice-candidate':\n          console.log('Received ICE candidate:', signal.data.type);\n          if (peerConnection.remoteDescription) {\n            await peerConnection.addIceCandidate(new RTCIceCandidate(signal.data));\n            console.log('ICE candidate added successfully');\n          } else {\n            console.log('Queueing ICE candidate (no remote description yet)');\n            // Queue the candidate for later when remote description is set\n            setTimeout(async () => {\n              if (peerConnection.remoteDescription) {\n                await peerConnection.addIceCandidate(new RTCIceCandidate(signal.data));\n              }\n            }, 100);\n          }\n          break;\n\n        case 'toggle-video':\n        case 'toggle-audio':\n          // Handle media state changes from partner\n          console.log('Received media toggle from partner:', signal.type, signal.data);\n          break;\n\n        default:\n          console.log('Unknown signal type:', signal.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebRTC signal:', error, signal);\n      setCallState('failed');\n    }\n  }, [getUserMedia, onSignal]);\n\n  // Toggle video\n  const toggleVideo = useCallback(() => {\n    console.log('Toggle video clicked, current stream:', localStreamRef.current);\n    if (localStreamRef.current) {\n      const videoTrack = localStreamRef.current.getVideoTracks()[0];\n      console.log('Video track found:', videoTrack);\n      if (videoTrack) {\n        videoTrack.enabled = !videoTrack.enabled;\n        console.log('Video track enabled set to:', videoTrack.enabled);\n        setMediaState(prev => ({ ...prev, video: videoTrack.enabled }));\n        \n        onSignal({\n          type: 'toggle-video',\n          data: { enabled: videoTrack.enabled },\n          from: '',\n          to: ''\n        });\n      } else {\n        console.log('No video track found');\n      }\n    } else {\n      console.log('No local stream available');\n      // Try to get user media first\n      getUserMedia().catch(console.error);\n    }\n  }, [onSignal, getUserMedia]);\n\n  // Toggle audio\n  const toggleAudio = useCallback(() => {\n    console.log('Toggle audio clicked, current stream:', localStreamRef.current);\n    if (localStreamRef.current) {\n      const audioTrack = localStreamRef.current.getAudioTracks()[0];\n      console.log('Audio track found:', audioTrack);\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        console.log('Audio track enabled set to:', audioTrack.enabled);\n        setMediaState(prev => ({ ...prev, audio: audioTrack.enabled }));\n        \n        onSignal({\n          type: 'toggle-audio',\n          data: { enabled: audioTrack.enabled },\n          from: '',\n          to: ''\n        });\n      } else {\n        console.log('No audio track found');\n      }\n    } else {\n      console.log('No local stream available');\n      // Try to get user media first\n      getUserMedia().catch(console.error);\n    }\n  }, [onSignal, getUserMedia]);\n\n  // Function to reassign streams to video elements (useful after layout changes)\n  const reassignVideoStreams = useCallback(() => {\n    console.log('Reassigning video streams...');\n    \n    // Reassign local stream\n    if (localStreamRef.current && localVideoRef.current) {\n      console.log('Reassigning local stream');\n      localVideoRef.current.srcObject = localStreamRef.current;\n      localVideoRef.current.play().catch(error => {\n        console.log('Local video autoplay prevented:', error);\n      });\n    }\n    \n    // Reassign remote stream using stored reference\n    if (remoteStreamRef.current && remoteVideoRef.current) {\n      console.log('Reassigning remote stream');\n      remoteVideoRef.current.srcObject = remoteStreamRef.current;\n      remoteVideoRef.current.play().catch(error => {\n        console.log('Remote video autoplay prevented:', error);\n      });\n    }\n  }, []);\n\n  // Cleanup on unmount or when component is no longer needed\n  useEffect(() => {\n    return () => {\n      console.log('Cleaning up WebRTC resources...');\n      if (localStreamRef.current) {\n        localStreamRef.current.getTracks().forEach(track => {\n          console.log('Stopping track:', track.kind);\n          track.stop();\n        });\n        localStreamRef.current = null;\n      }\n      if (peerConnectionRef.current) {\n        console.log('Closing peer connection');\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n      setIsMediaReady(false);\n      setCallState('idle');\n    };\n  }, []);\n\n  return {\n    localVideoRef,\n    remoteVideoRef,\n    mediaState,\n    toggleVideo,\n    toggleAudio,\n    startCall,\n    handleSignal,\n    callState,\n    isMediaReady,\n    reassignVideoStreams\n  };\n}","size_bytes":19292},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useSocket } from '@/hooks/useSocket';\nimport { LandingPage } from '@/components/LandingPage';\nimport { ChatInterface } from '@/components/ChatInterface';\nimport { VideoChat } from '@/components/VideoChat';\nimport { useCallback } from 'react';\n\nexport default function Chat() {\n  const {\n    socketState,\n    messages,\n    sendMessage,\n    joinQueue,\n    startVideoChat,\n    nextUser,\n    reportUser,\n    sendWebRTCSignal,\n    statusMessage,\n    isInitiator\n  } = useSocket();\n\n  const isConnecting = socketState === 'connecting';\n  const isWaiting = socketState === 'waiting' || socketState === 'video_waiting';\n  const isPaired = socketState === 'paired';\n  const isVideoPaired = socketState === 'video_paired';\n  const showLanding = socketState === 'connected' || socketState === 'disconnected' || isConnecting;\n\n  const goHome = useCallback(() => {\n    // Force disconnect current connection and return to landing page\n    window.location.reload();\n  }, []);\n\n  if (showLanding) {\n    return (\n      <LandingPage\n        onStartChat={joinQueue}\n        onStartVideo={startVideoChat}\n        statusMessage={statusMessage}\n        isConnecting={isConnecting || socketState === 'disconnected'}\n      />\n    );\n  }\n\n  if (isVideoPaired || socketState === 'video_waiting') {\n    return (\n      <VideoChat\n        messages={messages}\n        onSendMessage={sendMessage}\n        onNextUser={nextUser}\n        onReportUser={reportUser}\n        onWebRTCSignal={sendWebRTCSignal}\n        onGoHome={goHome}\n        statusMessage={statusMessage}\n        isWaiting={socketState === 'video_waiting'}\n        isInitiator={isInitiator}\n      />\n    );\n  }\n\n  return (\n    <ChatInterface\n      messages={messages}\n      onSendMessage={sendMessage}\n      onNextUser={nextUser}\n      onReportUser={reportUser}\n      statusMessage={statusMessage}\n      isWaiting={isWaiting}\n    />\n  );\n}\n","size_bytes":1881},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}